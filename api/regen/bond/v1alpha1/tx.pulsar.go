// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package bondv1alpha1

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/cosmos-sdk/api/cosmos/base/v1beta1"
	_ "github.com/gogo/protobuf/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_MsgIssueBond                  protoreflect.MessageDescriptor
	fd_MsgIssueBond_emission_denom   protoreflect.FieldDescriptor
	fd_MsgIssueBond_name             protoreflect.FieldDescriptor
	fd_MsgIssueBond_holder           protoreflect.FieldDescriptor
	fd_MsgIssueBond_face_value       protoreflect.FieldDescriptor
	fd_MsgIssueBond_face_currency    protoreflect.FieldDescriptor
	fd_MsgIssueBond_issuance_date    protoreflect.FieldDescriptor
	fd_MsgIssueBond_maturity_date    protoreflect.FieldDescriptor
	fd_MsgIssueBond_coupon_rate      protoreflect.FieldDescriptor
	fd_MsgIssueBond_coupon_frequency protoreflect.FieldDescriptor
	fd_MsgIssueBond_project          protoreflect.FieldDescriptor
	fd_MsgIssueBond_metadata         protoreflect.FieldDescriptor
)

func init() {
	file_regen_bond_v1alpha1_tx_proto_init()
	md_MsgIssueBond = File_regen_bond_v1alpha1_tx_proto.Messages().ByName("MsgIssueBond")
	fd_MsgIssueBond_emission_denom = md_MsgIssueBond.Fields().ByName("emission_denom")
	fd_MsgIssueBond_name = md_MsgIssueBond.Fields().ByName("name")
	fd_MsgIssueBond_holder = md_MsgIssueBond.Fields().ByName("holder")
	fd_MsgIssueBond_face_value = md_MsgIssueBond.Fields().ByName("face_value")
	fd_MsgIssueBond_face_currency = md_MsgIssueBond.Fields().ByName("face_currency")
	fd_MsgIssueBond_issuance_date = md_MsgIssueBond.Fields().ByName("issuance_date")
	fd_MsgIssueBond_maturity_date = md_MsgIssueBond.Fields().ByName("maturity_date")
	fd_MsgIssueBond_coupon_rate = md_MsgIssueBond.Fields().ByName("coupon_rate")
	fd_MsgIssueBond_coupon_frequency = md_MsgIssueBond.Fields().ByName("coupon_frequency")
	fd_MsgIssueBond_project = md_MsgIssueBond.Fields().ByName("project")
	fd_MsgIssueBond_metadata = md_MsgIssueBond.Fields().ByName("metadata")
}

var _ protoreflect.Message = (*fastReflection_MsgIssueBond)(nil)

type fastReflection_MsgIssueBond MsgIssueBond

func (x *MsgIssueBond) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgIssueBond)(x)
}

func (x *MsgIssueBond) slowProtoReflect() protoreflect.Message {
	mi := &file_regen_bond_v1alpha1_tx_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgIssueBond_messageType fastReflection_MsgIssueBond_messageType
var _ protoreflect.MessageType = fastReflection_MsgIssueBond_messageType{}

type fastReflection_MsgIssueBond_messageType struct{}

func (x fastReflection_MsgIssueBond_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgIssueBond)(nil)
}
func (x fastReflection_MsgIssueBond_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgIssueBond)
}
func (x fastReflection_MsgIssueBond_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgIssueBond
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgIssueBond) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgIssueBond
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgIssueBond) Type() protoreflect.MessageType {
	return _fastReflection_MsgIssueBond_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgIssueBond) New() protoreflect.Message {
	return new(fastReflection_MsgIssueBond)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgIssueBond) Interface() protoreflect.ProtoMessage {
	return (*MsgIssueBond)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgIssueBond) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.EmissionDenom != "" {
		value := protoreflect.ValueOfString(x.EmissionDenom)
		if !f(fd_MsgIssueBond_emission_denom, value) {
			return
		}
	}
	if x.Name != "" {
		value := protoreflect.ValueOfString(x.Name)
		if !f(fd_MsgIssueBond_name, value) {
			return
		}
	}
	if x.Holder != "" {
		value := protoreflect.ValueOfString(x.Holder)
		if !f(fd_MsgIssueBond_holder, value) {
			return
		}
	}
	if x.FaceValue != "" {
		value := protoreflect.ValueOfString(x.FaceValue)
		if !f(fd_MsgIssueBond_face_value, value) {
			return
		}
	}
	if x.FaceCurrency != "" {
		value := protoreflect.ValueOfString(x.FaceCurrency)
		if !f(fd_MsgIssueBond_face_currency, value) {
			return
		}
	}
	if x.IssuanceDate != nil {
		value := protoreflect.ValueOfMessage(x.IssuanceDate.ProtoReflect())
		if !f(fd_MsgIssueBond_issuance_date, value) {
			return
		}
	}
	if x.MaturityDate != nil {
		value := protoreflect.ValueOfMessage(x.MaturityDate.ProtoReflect())
		if !f(fd_MsgIssueBond_maturity_date, value) {
			return
		}
	}
	if x.CouponRate != "" {
		value := protoreflect.ValueOfString(x.CouponRate)
		if !f(fd_MsgIssueBond_coupon_rate, value) {
			return
		}
	}
	if x.CouponFrequency != "" {
		value := protoreflect.ValueOfString(x.CouponFrequency)
		if !f(fd_MsgIssueBond_coupon_frequency, value) {
			return
		}
	}
	if x.Project != "" {
		value := protoreflect.ValueOfString(x.Project)
		if !f(fd_MsgIssueBond_project, value) {
			return
		}
	}
	if x.Metadata != "" {
		value := protoreflect.ValueOfString(x.Metadata)
		if !f(fd_MsgIssueBond_metadata, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgIssueBond) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "regen.bond.v1alpha1.MsgIssueBond.emission_denom":
		return x.EmissionDenom != ""
	case "regen.bond.v1alpha1.MsgIssueBond.name":
		return x.Name != ""
	case "regen.bond.v1alpha1.MsgIssueBond.holder":
		return x.Holder != ""
	case "regen.bond.v1alpha1.MsgIssueBond.face_value":
		return x.FaceValue != ""
	case "regen.bond.v1alpha1.MsgIssueBond.face_currency":
		return x.FaceCurrency != ""
	case "regen.bond.v1alpha1.MsgIssueBond.issuance_date":
		return x.IssuanceDate != nil
	case "regen.bond.v1alpha1.MsgIssueBond.maturity_date":
		return x.MaturityDate != nil
	case "regen.bond.v1alpha1.MsgIssueBond.coupon_rate":
		return x.CouponRate != ""
	case "regen.bond.v1alpha1.MsgIssueBond.coupon_frequency":
		return x.CouponFrequency != ""
	case "regen.bond.v1alpha1.MsgIssueBond.project":
		return x.Project != ""
	case "regen.bond.v1alpha1.MsgIssueBond.metadata":
		return x.Metadata != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.bond.v1alpha1.MsgIssueBond"))
		}
		panic(fmt.Errorf("message regen.bond.v1alpha1.MsgIssueBond does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgIssueBond) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "regen.bond.v1alpha1.MsgIssueBond.emission_denom":
		x.EmissionDenom = ""
	case "regen.bond.v1alpha1.MsgIssueBond.name":
		x.Name = ""
	case "regen.bond.v1alpha1.MsgIssueBond.holder":
		x.Holder = ""
	case "regen.bond.v1alpha1.MsgIssueBond.face_value":
		x.FaceValue = ""
	case "regen.bond.v1alpha1.MsgIssueBond.face_currency":
		x.FaceCurrency = ""
	case "regen.bond.v1alpha1.MsgIssueBond.issuance_date":
		x.IssuanceDate = nil
	case "regen.bond.v1alpha1.MsgIssueBond.maturity_date":
		x.MaturityDate = nil
	case "regen.bond.v1alpha1.MsgIssueBond.coupon_rate":
		x.CouponRate = ""
	case "regen.bond.v1alpha1.MsgIssueBond.coupon_frequency":
		x.CouponFrequency = ""
	case "regen.bond.v1alpha1.MsgIssueBond.project":
		x.Project = ""
	case "regen.bond.v1alpha1.MsgIssueBond.metadata":
		x.Metadata = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.bond.v1alpha1.MsgIssueBond"))
		}
		panic(fmt.Errorf("message regen.bond.v1alpha1.MsgIssueBond does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgIssueBond) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "regen.bond.v1alpha1.MsgIssueBond.emission_denom":
		value := x.EmissionDenom
		return protoreflect.ValueOfString(value)
	case "regen.bond.v1alpha1.MsgIssueBond.name":
		value := x.Name
		return protoreflect.ValueOfString(value)
	case "regen.bond.v1alpha1.MsgIssueBond.holder":
		value := x.Holder
		return protoreflect.ValueOfString(value)
	case "regen.bond.v1alpha1.MsgIssueBond.face_value":
		value := x.FaceValue
		return protoreflect.ValueOfString(value)
	case "regen.bond.v1alpha1.MsgIssueBond.face_currency":
		value := x.FaceCurrency
		return protoreflect.ValueOfString(value)
	case "regen.bond.v1alpha1.MsgIssueBond.issuance_date":
		value := x.IssuanceDate
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "regen.bond.v1alpha1.MsgIssueBond.maturity_date":
		value := x.MaturityDate
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "regen.bond.v1alpha1.MsgIssueBond.coupon_rate":
		value := x.CouponRate
		return protoreflect.ValueOfString(value)
	case "regen.bond.v1alpha1.MsgIssueBond.coupon_frequency":
		value := x.CouponFrequency
		return protoreflect.ValueOfString(value)
	case "regen.bond.v1alpha1.MsgIssueBond.project":
		value := x.Project
		return protoreflect.ValueOfString(value)
	case "regen.bond.v1alpha1.MsgIssueBond.metadata":
		value := x.Metadata
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.bond.v1alpha1.MsgIssueBond"))
		}
		panic(fmt.Errorf("message regen.bond.v1alpha1.MsgIssueBond does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgIssueBond) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "regen.bond.v1alpha1.MsgIssueBond.emission_denom":
		x.EmissionDenom = value.Interface().(string)
	case "regen.bond.v1alpha1.MsgIssueBond.name":
		x.Name = value.Interface().(string)
	case "regen.bond.v1alpha1.MsgIssueBond.holder":
		x.Holder = value.Interface().(string)
	case "regen.bond.v1alpha1.MsgIssueBond.face_value":
		x.FaceValue = value.Interface().(string)
	case "regen.bond.v1alpha1.MsgIssueBond.face_currency":
		x.FaceCurrency = value.Interface().(string)
	case "regen.bond.v1alpha1.MsgIssueBond.issuance_date":
		x.IssuanceDate = value.Message().Interface().(*timestamppb.Timestamp)
	case "regen.bond.v1alpha1.MsgIssueBond.maturity_date":
		x.MaturityDate = value.Message().Interface().(*timestamppb.Timestamp)
	case "regen.bond.v1alpha1.MsgIssueBond.coupon_rate":
		x.CouponRate = value.Interface().(string)
	case "regen.bond.v1alpha1.MsgIssueBond.coupon_frequency":
		x.CouponFrequency = value.Interface().(string)
	case "regen.bond.v1alpha1.MsgIssueBond.project":
		x.Project = value.Interface().(string)
	case "regen.bond.v1alpha1.MsgIssueBond.metadata":
		x.Metadata = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.bond.v1alpha1.MsgIssueBond"))
		}
		panic(fmt.Errorf("message regen.bond.v1alpha1.MsgIssueBond does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgIssueBond) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "regen.bond.v1alpha1.MsgIssueBond.issuance_date":
		if x.IssuanceDate == nil {
			x.IssuanceDate = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.IssuanceDate.ProtoReflect())
	case "regen.bond.v1alpha1.MsgIssueBond.maturity_date":
		if x.MaturityDate == nil {
			x.MaturityDate = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.MaturityDate.ProtoReflect())
	case "regen.bond.v1alpha1.MsgIssueBond.emission_denom":
		panic(fmt.Errorf("field emission_denom of message regen.bond.v1alpha1.MsgIssueBond is not mutable"))
	case "regen.bond.v1alpha1.MsgIssueBond.name":
		panic(fmt.Errorf("field name of message regen.bond.v1alpha1.MsgIssueBond is not mutable"))
	case "regen.bond.v1alpha1.MsgIssueBond.holder":
		panic(fmt.Errorf("field holder of message regen.bond.v1alpha1.MsgIssueBond is not mutable"))
	case "regen.bond.v1alpha1.MsgIssueBond.face_value":
		panic(fmt.Errorf("field face_value of message regen.bond.v1alpha1.MsgIssueBond is not mutable"))
	case "regen.bond.v1alpha1.MsgIssueBond.face_currency":
		panic(fmt.Errorf("field face_currency of message regen.bond.v1alpha1.MsgIssueBond is not mutable"))
	case "regen.bond.v1alpha1.MsgIssueBond.coupon_rate":
		panic(fmt.Errorf("field coupon_rate of message regen.bond.v1alpha1.MsgIssueBond is not mutable"))
	case "regen.bond.v1alpha1.MsgIssueBond.coupon_frequency":
		panic(fmt.Errorf("field coupon_frequency of message regen.bond.v1alpha1.MsgIssueBond is not mutable"))
	case "regen.bond.v1alpha1.MsgIssueBond.project":
		panic(fmt.Errorf("field project of message regen.bond.v1alpha1.MsgIssueBond is not mutable"))
	case "regen.bond.v1alpha1.MsgIssueBond.metadata":
		panic(fmt.Errorf("field metadata of message regen.bond.v1alpha1.MsgIssueBond is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.bond.v1alpha1.MsgIssueBond"))
		}
		panic(fmt.Errorf("message regen.bond.v1alpha1.MsgIssueBond does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgIssueBond) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "regen.bond.v1alpha1.MsgIssueBond.emission_denom":
		return protoreflect.ValueOfString("")
	case "regen.bond.v1alpha1.MsgIssueBond.name":
		return protoreflect.ValueOfString("")
	case "regen.bond.v1alpha1.MsgIssueBond.holder":
		return protoreflect.ValueOfString("")
	case "regen.bond.v1alpha1.MsgIssueBond.face_value":
		return protoreflect.ValueOfString("")
	case "regen.bond.v1alpha1.MsgIssueBond.face_currency":
		return protoreflect.ValueOfString("")
	case "regen.bond.v1alpha1.MsgIssueBond.issuance_date":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "regen.bond.v1alpha1.MsgIssueBond.maturity_date":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "regen.bond.v1alpha1.MsgIssueBond.coupon_rate":
		return protoreflect.ValueOfString("")
	case "regen.bond.v1alpha1.MsgIssueBond.coupon_frequency":
		return protoreflect.ValueOfString("")
	case "regen.bond.v1alpha1.MsgIssueBond.project":
		return protoreflect.ValueOfString("")
	case "regen.bond.v1alpha1.MsgIssueBond.metadata":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.bond.v1alpha1.MsgIssueBond"))
		}
		panic(fmt.Errorf("message regen.bond.v1alpha1.MsgIssueBond does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgIssueBond) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in regen.bond.v1alpha1.MsgIssueBond", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgIssueBond) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgIssueBond) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgIssueBond) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgIssueBond) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgIssueBond)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.EmissionDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Name)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Holder)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.FaceValue)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.FaceCurrency)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.IssuanceDate != nil {
			l = options.Size(x.IssuanceDate)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.MaturityDate != nil {
			l = options.Size(x.MaturityDate)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.CouponRate)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.CouponFrequency)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Project)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Metadata)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgIssueBond)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Metadata) > 0 {
			i -= len(x.Metadata)
			copy(dAtA[i:], x.Metadata)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Metadata)))
			i--
			dAtA[i] = 0x5a
		}
		if len(x.Project) > 0 {
			i -= len(x.Project)
			copy(dAtA[i:], x.Project)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Project)))
			i--
			dAtA[i] = 0x52
		}
		if len(x.CouponFrequency) > 0 {
			i -= len(x.CouponFrequency)
			copy(dAtA[i:], x.CouponFrequency)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CouponFrequency)))
			i--
			dAtA[i] = 0x4a
		}
		if len(x.CouponRate) > 0 {
			i -= len(x.CouponRate)
			copy(dAtA[i:], x.CouponRate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CouponRate)))
			i--
			dAtA[i] = 0x42
		}
		if x.MaturityDate != nil {
			encoded, err := options.Marshal(x.MaturityDate)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x3a
		}
		if x.IssuanceDate != nil {
			encoded, err := options.Marshal(x.IssuanceDate)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.FaceCurrency) > 0 {
			i -= len(x.FaceCurrency)
			copy(dAtA[i:], x.FaceCurrency)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.FaceCurrency)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.FaceValue) > 0 {
			i -= len(x.FaceValue)
			copy(dAtA[i:], x.FaceValue)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.FaceValue)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.Holder) > 0 {
			i -= len(x.Holder)
			copy(dAtA[i:], x.Holder)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Holder)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Name) > 0 {
			i -= len(x.Name)
			copy(dAtA[i:], x.Name)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Name)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.EmissionDenom) > 0 {
			i -= len(x.EmissionDenom)
			copy(dAtA[i:], x.EmissionDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.EmissionDenom)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgIssueBond)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgIssueBond: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgIssueBond: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EmissionDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EmissionDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Name = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Holder", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Holder = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FaceValue", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FaceValue = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FaceCurrency", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FaceCurrency = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IssuanceDate", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.IssuanceDate == nil {
					x.IssuanceDate = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.IssuanceDate); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaturityDate", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.MaturityDate == nil {
					x.MaturityDate = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.MaturityDate); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CouponRate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CouponRate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CouponFrequency", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CouponFrequency = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Project", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Project = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Metadata = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_MsgIssueBondResponse         protoreflect.MessageDescriptor
	fd_MsgIssueBondResponse_bond_id protoreflect.FieldDescriptor
)

func init() {
	file_regen_bond_v1alpha1_tx_proto_init()
	md_MsgIssueBondResponse = File_regen_bond_v1alpha1_tx_proto.Messages().ByName("MsgIssueBondResponse")
	fd_MsgIssueBondResponse_bond_id = md_MsgIssueBondResponse.Fields().ByName("bond_id")
}

var _ protoreflect.Message = (*fastReflection_MsgIssueBondResponse)(nil)

type fastReflection_MsgIssueBondResponse MsgIssueBondResponse

func (x *MsgIssueBondResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgIssueBondResponse)(x)
}

func (x *MsgIssueBondResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_regen_bond_v1alpha1_tx_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgIssueBondResponse_messageType fastReflection_MsgIssueBondResponse_messageType
var _ protoreflect.MessageType = fastReflection_MsgIssueBondResponse_messageType{}

type fastReflection_MsgIssueBondResponse_messageType struct{}

func (x fastReflection_MsgIssueBondResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgIssueBondResponse)(nil)
}
func (x fastReflection_MsgIssueBondResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgIssueBondResponse)
}
func (x fastReflection_MsgIssueBondResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgIssueBondResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgIssueBondResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgIssueBondResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgIssueBondResponse) Type() protoreflect.MessageType {
	return _fastReflection_MsgIssueBondResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgIssueBondResponse) New() protoreflect.Message {
	return new(fastReflection_MsgIssueBondResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgIssueBondResponse) Interface() protoreflect.ProtoMessage {
	return (*MsgIssueBondResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgIssueBondResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.BondId != "" {
		value := protoreflect.ValueOfString(x.BondId)
		if !f(fd_MsgIssueBondResponse_bond_id, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgIssueBondResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "regen.bond.v1alpha1.MsgIssueBondResponse.bond_id":
		return x.BondId != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.bond.v1alpha1.MsgIssueBondResponse"))
		}
		panic(fmt.Errorf("message regen.bond.v1alpha1.MsgIssueBondResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgIssueBondResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "regen.bond.v1alpha1.MsgIssueBondResponse.bond_id":
		x.BondId = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.bond.v1alpha1.MsgIssueBondResponse"))
		}
		panic(fmt.Errorf("message regen.bond.v1alpha1.MsgIssueBondResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgIssueBondResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "regen.bond.v1alpha1.MsgIssueBondResponse.bond_id":
		value := x.BondId
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.bond.v1alpha1.MsgIssueBondResponse"))
		}
		panic(fmt.Errorf("message regen.bond.v1alpha1.MsgIssueBondResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgIssueBondResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "regen.bond.v1alpha1.MsgIssueBondResponse.bond_id":
		x.BondId = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.bond.v1alpha1.MsgIssueBondResponse"))
		}
		panic(fmt.Errorf("message regen.bond.v1alpha1.MsgIssueBondResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgIssueBondResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "regen.bond.v1alpha1.MsgIssueBondResponse.bond_id":
		panic(fmt.Errorf("field bond_id of message regen.bond.v1alpha1.MsgIssueBondResponse is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.bond.v1alpha1.MsgIssueBondResponse"))
		}
		panic(fmt.Errorf("message regen.bond.v1alpha1.MsgIssueBondResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgIssueBondResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "regen.bond.v1alpha1.MsgIssueBondResponse.bond_id":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.bond.v1alpha1.MsgIssueBondResponse"))
		}
		panic(fmt.Errorf("message regen.bond.v1alpha1.MsgIssueBondResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgIssueBondResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in regen.bond.v1alpha1.MsgIssueBondResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgIssueBondResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgIssueBondResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgIssueBondResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgIssueBondResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgIssueBondResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.BondId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgIssueBondResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.BondId) > 0 {
			i -= len(x.BondId)
			copy(dAtA[i:], x.BondId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.BondId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgIssueBondResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgIssueBondResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgIssueBondResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BondId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BondId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_MsgSellBond         protoreflect.MessageDescriptor
	fd_MsgSellBond_bond_id protoreflect.FieldDescriptor
	fd_MsgSellBond_buyer   protoreflect.FieldDescriptor
	fd_MsgSellBond_amount  protoreflect.FieldDescriptor
	fd_MsgSellBond_holder  protoreflect.FieldDescriptor
)

func init() {
	file_regen_bond_v1alpha1_tx_proto_init()
	md_MsgSellBond = File_regen_bond_v1alpha1_tx_proto.Messages().ByName("MsgSellBond")
	fd_MsgSellBond_bond_id = md_MsgSellBond.Fields().ByName("bond_id")
	fd_MsgSellBond_buyer = md_MsgSellBond.Fields().ByName("buyer")
	fd_MsgSellBond_amount = md_MsgSellBond.Fields().ByName("amount")
	fd_MsgSellBond_holder = md_MsgSellBond.Fields().ByName("holder")
}

var _ protoreflect.Message = (*fastReflection_MsgSellBond)(nil)

type fastReflection_MsgSellBond MsgSellBond

func (x *MsgSellBond) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgSellBond)(x)
}

func (x *MsgSellBond) slowProtoReflect() protoreflect.Message {
	mi := &file_regen_bond_v1alpha1_tx_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgSellBond_messageType fastReflection_MsgSellBond_messageType
var _ protoreflect.MessageType = fastReflection_MsgSellBond_messageType{}

type fastReflection_MsgSellBond_messageType struct{}

func (x fastReflection_MsgSellBond_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgSellBond)(nil)
}
func (x fastReflection_MsgSellBond_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgSellBond)
}
func (x fastReflection_MsgSellBond_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgSellBond
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgSellBond) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgSellBond
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgSellBond) Type() protoreflect.MessageType {
	return _fastReflection_MsgSellBond_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgSellBond) New() protoreflect.Message {
	return new(fastReflection_MsgSellBond)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgSellBond) Interface() protoreflect.ProtoMessage {
	return (*MsgSellBond)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgSellBond) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.BondId != "" {
		value := protoreflect.ValueOfString(x.BondId)
		if !f(fd_MsgSellBond_bond_id, value) {
			return
		}
	}
	if x.Buyer != "" {
		value := protoreflect.ValueOfString(x.Buyer)
		if !f(fd_MsgSellBond_buyer, value) {
			return
		}
	}
	if x.Amount != "" {
		value := protoreflect.ValueOfString(x.Amount)
		if !f(fd_MsgSellBond_amount, value) {
			return
		}
	}
	if x.Holder != "" {
		value := protoreflect.ValueOfString(x.Holder)
		if !f(fd_MsgSellBond_holder, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgSellBond) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "regen.bond.v1alpha1.MsgSellBond.bond_id":
		return x.BondId != ""
	case "regen.bond.v1alpha1.MsgSellBond.buyer":
		return x.Buyer != ""
	case "regen.bond.v1alpha1.MsgSellBond.amount":
		return x.Amount != ""
	case "regen.bond.v1alpha1.MsgSellBond.holder":
		return x.Holder != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.bond.v1alpha1.MsgSellBond"))
		}
		panic(fmt.Errorf("message regen.bond.v1alpha1.MsgSellBond does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgSellBond) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "regen.bond.v1alpha1.MsgSellBond.bond_id":
		x.BondId = ""
	case "regen.bond.v1alpha1.MsgSellBond.buyer":
		x.Buyer = ""
	case "regen.bond.v1alpha1.MsgSellBond.amount":
		x.Amount = ""
	case "regen.bond.v1alpha1.MsgSellBond.holder":
		x.Holder = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.bond.v1alpha1.MsgSellBond"))
		}
		panic(fmt.Errorf("message regen.bond.v1alpha1.MsgSellBond does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgSellBond) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "regen.bond.v1alpha1.MsgSellBond.bond_id":
		value := x.BondId
		return protoreflect.ValueOfString(value)
	case "regen.bond.v1alpha1.MsgSellBond.buyer":
		value := x.Buyer
		return protoreflect.ValueOfString(value)
	case "regen.bond.v1alpha1.MsgSellBond.amount":
		value := x.Amount
		return protoreflect.ValueOfString(value)
	case "regen.bond.v1alpha1.MsgSellBond.holder":
		value := x.Holder
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.bond.v1alpha1.MsgSellBond"))
		}
		panic(fmt.Errorf("message regen.bond.v1alpha1.MsgSellBond does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgSellBond) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "regen.bond.v1alpha1.MsgSellBond.bond_id":
		x.BondId = value.Interface().(string)
	case "regen.bond.v1alpha1.MsgSellBond.buyer":
		x.Buyer = value.Interface().(string)
	case "regen.bond.v1alpha1.MsgSellBond.amount":
		x.Amount = value.Interface().(string)
	case "regen.bond.v1alpha1.MsgSellBond.holder":
		x.Holder = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.bond.v1alpha1.MsgSellBond"))
		}
		panic(fmt.Errorf("message regen.bond.v1alpha1.MsgSellBond does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgSellBond) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "regen.bond.v1alpha1.MsgSellBond.bond_id":
		panic(fmt.Errorf("field bond_id of message regen.bond.v1alpha1.MsgSellBond is not mutable"))
	case "regen.bond.v1alpha1.MsgSellBond.buyer":
		panic(fmt.Errorf("field buyer of message regen.bond.v1alpha1.MsgSellBond is not mutable"))
	case "regen.bond.v1alpha1.MsgSellBond.amount":
		panic(fmt.Errorf("field amount of message regen.bond.v1alpha1.MsgSellBond is not mutable"))
	case "regen.bond.v1alpha1.MsgSellBond.holder":
		panic(fmt.Errorf("field holder of message regen.bond.v1alpha1.MsgSellBond is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.bond.v1alpha1.MsgSellBond"))
		}
		panic(fmt.Errorf("message regen.bond.v1alpha1.MsgSellBond does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgSellBond) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "regen.bond.v1alpha1.MsgSellBond.bond_id":
		return protoreflect.ValueOfString("")
	case "regen.bond.v1alpha1.MsgSellBond.buyer":
		return protoreflect.ValueOfString("")
	case "regen.bond.v1alpha1.MsgSellBond.amount":
		return protoreflect.ValueOfString("")
	case "regen.bond.v1alpha1.MsgSellBond.holder":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.bond.v1alpha1.MsgSellBond"))
		}
		panic(fmt.Errorf("message regen.bond.v1alpha1.MsgSellBond does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgSellBond) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in regen.bond.v1alpha1.MsgSellBond", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgSellBond) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgSellBond) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgSellBond) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgSellBond) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgSellBond)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.BondId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Buyer)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Amount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Holder)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgSellBond)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Holder) > 0 {
			i -= len(x.Holder)
			copy(dAtA[i:], x.Holder)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Holder)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.Amount) > 0 {
			i -= len(x.Amount)
			copy(dAtA[i:], x.Amount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Amount)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Buyer) > 0 {
			i -= len(x.Buyer)
			copy(dAtA[i:], x.Buyer)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Buyer)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.BondId) > 0 {
			i -= len(x.BondId)
			copy(dAtA[i:], x.BondId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.BondId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgSellBond)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgSellBond: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgSellBond: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BondId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BondId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Buyer = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Amount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Holder", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Holder = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_MsgSellBondResponse_1_list)(nil)

type _MsgSellBondResponse_1_list struct {
	list *[]string
}

func (x *_MsgSellBondResponse_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_MsgSellBondResponse_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_MsgSellBondResponse_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_MsgSellBondResponse_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_MsgSellBondResponse_1_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message MsgSellBondResponse at list field BondId as it is not of Message kind"))
}

func (x *_MsgSellBondResponse_1_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_MsgSellBondResponse_1_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_MsgSellBondResponse_1_list) IsValid() bool {
	return x.list != nil
}

var (
	md_MsgSellBondResponse         protoreflect.MessageDescriptor
	fd_MsgSellBondResponse_bond_id protoreflect.FieldDescriptor
)

func init() {
	file_regen_bond_v1alpha1_tx_proto_init()
	md_MsgSellBondResponse = File_regen_bond_v1alpha1_tx_proto.Messages().ByName("MsgSellBondResponse")
	fd_MsgSellBondResponse_bond_id = md_MsgSellBondResponse.Fields().ByName("bond_id")
}

var _ protoreflect.Message = (*fastReflection_MsgSellBondResponse)(nil)

type fastReflection_MsgSellBondResponse MsgSellBondResponse

func (x *MsgSellBondResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgSellBondResponse)(x)
}

func (x *MsgSellBondResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_regen_bond_v1alpha1_tx_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgSellBondResponse_messageType fastReflection_MsgSellBondResponse_messageType
var _ protoreflect.MessageType = fastReflection_MsgSellBondResponse_messageType{}

type fastReflection_MsgSellBondResponse_messageType struct{}

func (x fastReflection_MsgSellBondResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgSellBondResponse)(nil)
}
func (x fastReflection_MsgSellBondResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgSellBondResponse)
}
func (x fastReflection_MsgSellBondResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgSellBondResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgSellBondResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgSellBondResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgSellBondResponse) Type() protoreflect.MessageType {
	return _fastReflection_MsgSellBondResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgSellBondResponse) New() protoreflect.Message {
	return new(fastReflection_MsgSellBondResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgSellBondResponse) Interface() protoreflect.ProtoMessage {
	return (*MsgSellBondResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgSellBondResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.BondId) != 0 {
		value := protoreflect.ValueOfList(&_MsgSellBondResponse_1_list{list: &x.BondId})
		if !f(fd_MsgSellBondResponse_bond_id, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgSellBondResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "regen.bond.v1alpha1.MsgSellBondResponse.bond_id":
		return len(x.BondId) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.bond.v1alpha1.MsgSellBondResponse"))
		}
		panic(fmt.Errorf("message regen.bond.v1alpha1.MsgSellBondResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgSellBondResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "regen.bond.v1alpha1.MsgSellBondResponse.bond_id":
		x.BondId = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.bond.v1alpha1.MsgSellBondResponse"))
		}
		panic(fmt.Errorf("message regen.bond.v1alpha1.MsgSellBondResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgSellBondResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "regen.bond.v1alpha1.MsgSellBondResponse.bond_id":
		if len(x.BondId) == 0 {
			return protoreflect.ValueOfList(&_MsgSellBondResponse_1_list{})
		}
		listValue := &_MsgSellBondResponse_1_list{list: &x.BondId}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.bond.v1alpha1.MsgSellBondResponse"))
		}
		panic(fmt.Errorf("message regen.bond.v1alpha1.MsgSellBondResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgSellBondResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "regen.bond.v1alpha1.MsgSellBondResponse.bond_id":
		lv := value.List()
		clv := lv.(*_MsgSellBondResponse_1_list)
		x.BondId = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.bond.v1alpha1.MsgSellBondResponse"))
		}
		panic(fmt.Errorf("message regen.bond.v1alpha1.MsgSellBondResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgSellBondResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "regen.bond.v1alpha1.MsgSellBondResponse.bond_id":
		if x.BondId == nil {
			x.BondId = []string{}
		}
		value := &_MsgSellBondResponse_1_list{list: &x.BondId}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.bond.v1alpha1.MsgSellBondResponse"))
		}
		panic(fmt.Errorf("message regen.bond.v1alpha1.MsgSellBondResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgSellBondResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "regen.bond.v1alpha1.MsgSellBondResponse.bond_id":
		list := []string{}
		return protoreflect.ValueOfList(&_MsgSellBondResponse_1_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.bond.v1alpha1.MsgSellBondResponse"))
		}
		panic(fmt.Errorf("message regen.bond.v1alpha1.MsgSellBondResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgSellBondResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in regen.bond.v1alpha1.MsgSellBondResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgSellBondResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgSellBondResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgSellBondResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgSellBondResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgSellBondResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.BondId) > 0 {
			for _, s := range x.BondId {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgSellBondResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.BondId) > 0 {
			for iNdEx := len(x.BondId) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.BondId[iNdEx])
				copy(dAtA[i:], x.BondId[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.BondId[iNdEx])))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgSellBondResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgSellBondResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgSellBondResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BondId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BondId = append(x.BondId, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_MsgMatureEmission                protoreflect.MessageDescriptor
	fd_MsgMatureEmission_emission_denom protoreflect.FieldDescriptor
)

func init() {
	file_regen_bond_v1alpha1_tx_proto_init()
	md_MsgMatureEmission = File_regen_bond_v1alpha1_tx_proto.Messages().ByName("MsgMatureEmission")
	fd_MsgMatureEmission_emission_denom = md_MsgMatureEmission.Fields().ByName("emission_denom")
}

var _ protoreflect.Message = (*fastReflection_MsgMatureEmission)(nil)

type fastReflection_MsgMatureEmission MsgMatureEmission

func (x *MsgMatureEmission) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgMatureEmission)(x)
}

func (x *MsgMatureEmission) slowProtoReflect() protoreflect.Message {
	mi := &file_regen_bond_v1alpha1_tx_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgMatureEmission_messageType fastReflection_MsgMatureEmission_messageType
var _ protoreflect.MessageType = fastReflection_MsgMatureEmission_messageType{}

type fastReflection_MsgMatureEmission_messageType struct{}

func (x fastReflection_MsgMatureEmission_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgMatureEmission)(nil)
}
func (x fastReflection_MsgMatureEmission_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgMatureEmission)
}
func (x fastReflection_MsgMatureEmission_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgMatureEmission
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgMatureEmission) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgMatureEmission
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgMatureEmission) Type() protoreflect.MessageType {
	return _fastReflection_MsgMatureEmission_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgMatureEmission) New() protoreflect.Message {
	return new(fastReflection_MsgMatureEmission)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgMatureEmission) Interface() protoreflect.ProtoMessage {
	return (*MsgMatureEmission)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgMatureEmission) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.EmissionDenom != "" {
		value := protoreflect.ValueOfString(x.EmissionDenom)
		if !f(fd_MsgMatureEmission_emission_denom, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgMatureEmission) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "regen.bond.v1alpha1.MsgMatureEmission.emission_denom":
		return x.EmissionDenom != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.bond.v1alpha1.MsgMatureEmission"))
		}
		panic(fmt.Errorf("message regen.bond.v1alpha1.MsgMatureEmission does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgMatureEmission) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "regen.bond.v1alpha1.MsgMatureEmission.emission_denom":
		x.EmissionDenom = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.bond.v1alpha1.MsgMatureEmission"))
		}
		panic(fmt.Errorf("message regen.bond.v1alpha1.MsgMatureEmission does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgMatureEmission) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "regen.bond.v1alpha1.MsgMatureEmission.emission_denom":
		value := x.EmissionDenom
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.bond.v1alpha1.MsgMatureEmission"))
		}
		panic(fmt.Errorf("message regen.bond.v1alpha1.MsgMatureEmission does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgMatureEmission) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "regen.bond.v1alpha1.MsgMatureEmission.emission_denom":
		x.EmissionDenom = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.bond.v1alpha1.MsgMatureEmission"))
		}
		panic(fmt.Errorf("message regen.bond.v1alpha1.MsgMatureEmission does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgMatureEmission) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "regen.bond.v1alpha1.MsgMatureEmission.emission_denom":
		panic(fmt.Errorf("field emission_denom of message regen.bond.v1alpha1.MsgMatureEmission is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.bond.v1alpha1.MsgMatureEmission"))
		}
		panic(fmt.Errorf("message regen.bond.v1alpha1.MsgMatureEmission does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgMatureEmission) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "regen.bond.v1alpha1.MsgMatureEmission.emission_denom":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.bond.v1alpha1.MsgMatureEmission"))
		}
		panic(fmt.Errorf("message regen.bond.v1alpha1.MsgMatureEmission does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgMatureEmission) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in regen.bond.v1alpha1.MsgMatureEmission", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgMatureEmission) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgMatureEmission) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgMatureEmission) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgMatureEmission) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgMatureEmission)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.EmissionDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgMatureEmission)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.EmissionDenom) > 0 {
			i -= len(x.EmissionDenom)
			copy(dAtA[i:], x.EmissionDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.EmissionDenom)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgMatureEmission)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgMatureEmission: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgMatureEmission: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EmissionDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EmissionDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_MsgMatureEmissionResponse                protoreflect.MessageDescriptor
	fd_MsgMatureEmissionResponse_emission_denom protoreflect.FieldDescriptor
)

func init() {
	file_regen_bond_v1alpha1_tx_proto_init()
	md_MsgMatureEmissionResponse = File_regen_bond_v1alpha1_tx_proto.Messages().ByName("MsgMatureEmissionResponse")
	fd_MsgMatureEmissionResponse_emission_denom = md_MsgMatureEmissionResponse.Fields().ByName("emission_denom")
}

var _ protoreflect.Message = (*fastReflection_MsgMatureEmissionResponse)(nil)

type fastReflection_MsgMatureEmissionResponse MsgMatureEmissionResponse

func (x *MsgMatureEmissionResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgMatureEmissionResponse)(x)
}

func (x *MsgMatureEmissionResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_regen_bond_v1alpha1_tx_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgMatureEmissionResponse_messageType fastReflection_MsgMatureEmissionResponse_messageType
var _ protoreflect.MessageType = fastReflection_MsgMatureEmissionResponse_messageType{}

type fastReflection_MsgMatureEmissionResponse_messageType struct{}

func (x fastReflection_MsgMatureEmissionResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgMatureEmissionResponse)(nil)
}
func (x fastReflection_MsgMatureEmissionResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgMatureEmissionResponse)
}
func (x fastReflection_MsgMatureEmissionResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgMatureEmissionResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgMatureEmissionResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgMatureEmissionResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgMatureEmissionResponse) Type() protoreflect.MessageType {
	return _fastReflection_MsgMatureEmissionResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgMatureEmissionResponse) New() protoreflect.Message {
	return new(fastReflection_MsgMatureEmissionResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgMatureEmissionResponse) Interface() protoreflect.ProtoMessage {
	return (*MsgMatureEmissionResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgMatureEmissionResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.EmissionDenom != "" {
		value := protoreflect.ValueOfString(x.EmissionDenom)
		if !f(fd_MsgMatureEmissionResponse_emission_denom, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgMatureEmissionResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "regen.bond.v1alpha1.MsgMatureEmissionResponse.emission_denom":
		return x.EmissionDenom != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.bond.v1alpha1.MsgMatureEmissionResponse"))
		}
		panic(fmt.Errorf("message regen.bond.v1alpha1.MsgMatureEmissionResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgMatureEmissionResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "regen.bond.v1alpha1.MsgMatureEmissionResponse.emission_denom":
		x.EmissionDenom = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.bond.v1alpha1.MsgMatureEmissionResponse"))
		}
		panic(fmt.Errorf("message regen.bond.v1alpha1.MsgMatureEmissionResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgMatureEmissionResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "regen.bond.v1alpha1.MsgMatureEmissionResponse.emission_denom":
		value := x.EmissionDenom
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.bond.v1alpha1.MsgMatureEmissionResponse"))
		}
		panic(fmt.Errorf("message regen.bond.v1alpha1.MsgMatureEmissionResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgMatureEmissionResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "regen.bond.v1alpha1.MsgMatureEmissionResponse.emission_denom":
		x.EmissionDenom = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.bond.v1alpha1.MsgMatureEmissionResponse"))
		}
		panic(fmt.Errorf("message regen.bond.v1alpha1.MsgMatureEmissionResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgMatureEmissionResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "regen.bond.v1alpha1.MsgMatureEmissionResponse.emission_denom":
		panic(fmt.Errorf("field emission_denom of message regen.bond.v1alpha1.MsgMatureEmissionResponse is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.bond.v1alpha1.MsgMatureEmissionResponse"))
		}
		panic(fmt.Errorf("message regen.bond.v1alpha1.MsgMatureEmissionResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgMatureEmissionResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "regen.bond.v1alpha1.MsgMatureEmissionResponse.emission_denom":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.bond.v1alpha1.MsgMatureEmissionResponse"))
		}
		panic(fmt.Errorf("message regen.bond.v1alpha1.MsgMatureEmissionResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgMatureEmissionResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in regen.bond.v1alpha1.MsgMatureEmissionResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgMatureEmissionResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgMatureEmissionResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgMatureEmissionResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgMatureEmissionResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgMatureEmissionResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.EmissionDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgMatureEmissionResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.EmissionDenom) > 0 {
			i -= len(x.EmissionDenom)
			copy(dAtA[i:], x.EmissionDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.EmissionDenom)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgMatureEmissionResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgMatureEmissionResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgMatureEmissionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EmissionDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EmissionDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: regen/bond/v1alpha1/tx.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MsgIssueBond is the Msg/IssueBond request type.
type MsgIssueBond struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmissionDenom string `protobuf:"bytes,1,opt,name=emission_denom,json=emissionDenom,proto3" json:"emission_denom,omitempty"`
	// bond name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// account address of current holder of the bond
	Holder string `protobuf:"bytes,3,opt,name=holder,proto3" json:"holder,omitempty"`
	// face value of the bond
	FaceValue string `protobuf:"bytes,4,opt,name=face_value,json=faceValue,proto3" json:"face_value,omitempty"`
	// currency of the face value
	FaceCurrency string `protobuf:"bytes,5,opt,name=face_currency,json=faceCurrency,proto3" json:"face_currency,omitempty"`
	// date of issuance
	IssuanceDate *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=issuance_date,json=issuanceDate,proto3" json:"issuance_date,omitempty"`
	// date of maturity
	MaturityDate *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=maturity_date,json=maturityDate,proto3" json:"maturity_date,omitempty"`
	// coupon rate
	CouponRate string `protobuf:"bytes,8,opt,name=coupon_rate,json=couponRate,proto3" json:"coupon_rate,omitempty"`
	// coupon frequency
	CouponFrequency string `protobuf:"bytes,9,opt,name=coupon_frequency,json=couponFrequency,proto3" json:"coupon_frequency,omitempty"`
	// project code
	Project string `protobuf:"bytes,10,opt,name=project,proto3" json:"project,omitempty"`
	// metadata encoded in base64
	Metadata string `protobuf:"bytes,11,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *MsgIssueBond) Reset() {
	*x = MsgIssueBond{}
	if protoimpl.UnsafeEnabled {
		mi := &file_regen_bond_v1alpha1_tx_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgIssueBond) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgIssueBond) ProtoMessage() {}

// Deprecated: Use MsgIssueBond.ProtoReflect.Descriptor instead.
func (*MsgIssueBond) Descriptor() ([]byte, []int) {
	return file_regen_bond_v1alpha1_tx_proto_rawDescGZIP(), []int{0}
}

func (x *MsgIssueBond) GetEmissionDenom() string {
	if x != nil {
		return x.EmissionDenom
	}
	return ""
}

func (x *MsgIssueBond) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MsgIssueBond) GetHolder() string {
	if x != nil {
		return x.Holder
	}
	return ""
}

func (x *MsgIssueBond) GetFaceValue() string {
	if x != nil {
		return x.FaceValue
	}
	return ""
}

func (x *MsgIssueBond) GetFaceCurrency() string {
	if x != nil {
		return x.FaceCurrency
	}
	return ""
}

func (x *MsgIssueBond) GetIssuanceDate() *timestamppb.Timestamp {
	if x != nil {
		return x.IssuanceDate
	}
	return nil
}

func (x *MsgIssueBond) GetMaturityDate() *timestamppb.Timestamp {
	if x != nil {
		return x.MaturityDate
	}
	return nil
}

func (x *MsgIssueBond) GetCouponRate() string {
	if x != nil {
		return x.CouponRate
	}
	return ""
}

func (x *MsgIssueBond) GetCouponFrequency() string {
	if x != nil {
		return x.CouponFrequency
	}
	return ""
}

func (x *MsgIssueBond) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *MsgIssueBond) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

// MsgIssueBondResponse is the Msg/IssueBond response type.
type MsgIssueBondResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// bond_id is the unique ID of the newly created bond.
	BondId string `protobuf:"bytes,1,opt,name=bond_id,json=bondId,proto3" json:"bond_id,omitempty"`
}

func (x *MsgIssueBondResponse) Reset() {
	*x = MsgIssueBondResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_regen_bond_v1alpha1_tx_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgIssueBondResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgIssueBondResponse) ProtoMessage() {}

// Deprecated: Use MsgIssueBondResponse.ProtoReflect.Descriptor instead.
func (*MsgIssueBondResponse) Descriptor() ([]byte, []int) {
	return file_regen_bond_v1alpha1_tx_proto_rawDescGZIP(), []int{1}
}

func (x *MsgIssueBondResponse) GetBondId() string {
	if x != nil {
		return x.BondId
	}
	return ""
}

// MsgIssueBond is the Msg/IssueBond request type.
type MsgSellBond struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// bond_id is the unique ID of the newly created bond.
	BondId string `protobuf:"bytes,1,opt,name=bond_id,json=bondId,proto3" json:"bond_id,omitempty"`
	// buyer of the bond
	Buyer string `protobuf:"bytes,2,opt,name=buyer,proto3" json:"buyer,omitempty"`
	// amount of bought bond
	Amount string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// holder of the bond
	Holder string `protobuf:"bytes,4,opt,name=holder,proto3" json:"holder,omitempty"`
}

func (x *MsgSellBond) Reset() {
	*x = MsgSellBond{}
	if protoimpl.UnsafeEnabled {
		mi := &file_regen_bond_v1alpha1_tx_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgSellBond) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgSellBond) ProtoMessage() {}

// Deprecated: Use MsgSellBond.ProtoReflect.Descriptor instead.
func (*MsgSellBond) Descriptor() ([]byte, []int) {
	return file_regen_bond_v1alpha1_tx_proto_rawDescGZIP(), []int{2}
}

func (x *MsgSellBond) GetBondId() string {
	if x != nil {
		return x.BondId
	}
	return ""
}

func (x *MsgSellBond) GetBuyer() string {
	if x != nil {
		return x.Buyer
	}
	return ""
}

func (x *MsgSellBond) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *MsgSellBond) GetHolder() string {
	if x != nil {
		return x.Holder
	}
	return ""
}

// MsgSellBondResponse is the Msg/MsgSellBond response type.
type MsgSellBondResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// bond_id is the unique ID of the newly created bond.
	BondId []string `protobuf:"bytes,1,rep,name=bond_id,json=bondId,proto3" json:"bond_id,omitempty"`
}

func (x *MsgSellBondResponse) Reset() {
	*x = MsgSellBondResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_regen_bond_v1alpha1_tx_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgSellBondResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgSellBondResponse) ProtoMessage() {}

// Deprecated: Use MsgSellBondResponse.ProtoReflect.Descriptor instead.
func (*MsgSellBondResponse) Descriptor() ([]byte, []int) {
	return file_regen_bond_v1alpha1_tx_proto_rawDescGZIP(), []int{3}
}

func (x *MsgSellBondResponse) GetBondId() []string {
	if x != nil {
		return x.BondId
	}
	return nil
}

// MsgIssueBond is the Msg/MsgMatureBond request type.
type MsgMatureEmission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// bond_id is the unique ID of all bonds that belongs to one emission.
	EmissionDenom string `protobuf:"bytes,1,opt,name=emission_denom,json=emissionDenom,proto3" json:"emission_denom,omitempty"`
}

func (x *MsgMatureEmission) Reset() {
	*x = MsgMatureEmission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_regen_bond_v1alpha1_tx_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgMatureEmission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgMatureEmission) ProtoMessage() {}

// Deprecated: Use MsgMatureEmission.ProtoReflect.Descriptor instead.
func (*MsgMatureEmission) Descriptor() ([]byte, []int) {
	return file_regen_bond_v1alpha1_tx_proto_rawDescGZIP(), []int{4}
}

func (x *MsgMatureEmission) GetEmissionDenom() string {
	if x != nil {
		return x.EmissionDenom
	}
	return ""
}

// MsgMatureBondResponse is the Msg/MsgMatureBond response type.
type MsgMatureEmissionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// bond_id is the unique ID of all bonds that belongs to one emission.
	EmissionDenom string `protobuf:"bytes,1,opt,name=emission_denom,json=emissionDenom,proto3" json:"emission_denom,omitempty"`
}

func (x *MsgMatureEmissionResponse) Reset() {
	*x = MsgMatureEmissionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_regen_bond_v1alpha1_tx_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgMatureEmissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgMatureEmissionResponse) ProtoMessage() {}

// Deprecated: Use MsgMatureEmissionResponse.ProtoReflect.Descriptor instead.
func (*MsgMatureEmissionResponse) Descriptor() ([]byte, []int) {
	return file_regen_bond_v1alpha1_tx_proto_rawDescGZIP(), []int{5}
}

func (x *MsgMatureEmissionResponse) GetEmissionDenom() string {
	if x != nil {
		return x.EmissionDenom
	}
	return ""
}

var File_regen_bond_v1alpha1_tx_proto protoreflect.FileDescriptor

var file_regen_bond_v1alpha1_tx_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x2f, 0x62, 0x6f, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x74, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13,
	0x72, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x62, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f,
	0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb5, 0x03, 0x0a, 0x0c, 0x4d,
	0x73, 0x67, 0x49, 0x73, 0x73, 0x75, 0x65, 0x42, 0x6f, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6e,
	0x6f, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x66, 0x61, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x61, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0c, 0x69, 0x73, 0x73,
	0x75, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x6d, 0x61, 0x74,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0x90, 0xdf,
	0x1f, 0x01, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x2f, 0x0a, 0x14, 0x4d, 0x73, 0x67, 0x49, 0x73, 0x73, 0x75, 0x65, 0x42, 0x6f,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x6f,
	0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x6f, 0x6e,
	0x64, 0x49, 0x64, 0x22, 0x6c, 0x0a, 0x0b, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x6c, 0x6c, 0x42, 0x6f,
	0x6e, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x6f, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x6f, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x75, 0x79, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x75, 0x79, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x22, 0x2e, 0x0a, 0x13, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x6c, 0x6c, 0x42, 0x6f, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x6f, 0x6e, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x62, 0x6f, 0x6e, 0x64, 0x49,
	0x64, 0x22, 0x3a, 0x0a, 0x11, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x65, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x22, 0x42, 0x0a,
	0x19, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x65, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6e, 0x6f,
	0x6d, 0x32, 0xb9, 0x01, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x12, 0x59, 0x0a, 0x09, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x42, 0x6f, 0x6e, 0x64, 0x12, 0x21, 0x2e, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x62,
	0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x73, 0x67,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x42, 0x6f, 0x6e, 0x64, 0x1a, 0x29, 0x2e, 0x72, 0x65, 0x67, 0x65,
	0x6e, 0x2e, 0x62, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4d, 0x73, 0x67, 0x49, 0x73, 0x73, 0x75, 0x65, 0x42, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x08, 0x53, 0x65, 0x6c, 0x6c, 0x42, 0x6f, 0x6e, 0x64,
	0x12, 0x20, 0x2e, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x62, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x6c, 0x6c, 0x42, 0x6f,
	0x6e, 0x64, 0x1a, 0x29, 0x2e, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x62, 0x6f, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x42, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xdc, 0x01,
	0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x62, 0x6f, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x07, 0x54, 0x78, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x72,
	0x65, 0x67, 0x65, 0x6e, 0x2d, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x72, 0x65, 0x67, 0x65, 0x6e, 0x2f, 0x62, 0x6f, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x3b, 0x62, 0x6f, 0x6e, 0x64, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0xa2, 0x02, 0x03, 0x52, 0x42, 0x58, 0xaa, 0x02, 0x13, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x42,
	0x6f, 0x6e, 0x64, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x13, 0x52,
	0x65, 0x67, 0x65, 0x6e, 0x5c, 0x42, 0x6f, 0x6e, 0x64, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0xe2, 0x02, 0x1f, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x5c, 0x42, 0x6f, 0x6e, 0x64, 0x5c,
	0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x15, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x3a, 0x3a, 0x42, 0x6f,
	0x6e, 0x64, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_regen_bond_v1alpha1_tx_proto_rawDescOnce sync.Once
	file_regen_bond_v1alpha1_tx_proto_rawDescData = file_regen_bond_v1alpha1_tx_proto_rawDesc
)

func file_regen_bond_v1alpha1_tx_proto_rawDescGZIP() []byte {
	file_regen_bond_v1alpha1_tx_proto_rawDescOnce.Do(func() {
		file_regen_bond_v1alpha1_tx_proto_rawDescData = protoimpl.X.CompressGZIP(file_regen_bond_v1alpha1_tx_proto_rawDescData)
	})
	return file_regen_bond_v1alpha1_tx_proto_rawDescData
}

var file_regen_bond_v1alpha1_tx_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_regen_bond_v1alpha1_tx_proto_goTypes = []interface{}{
	(*MsgIssueBond)(nil),              // 0: regen.bond.v1alpha1.MsgIssueBond
	(*MsgIssueBondResponse)(nil),      // 1: regen.bond.v1alpha1.MsgIssueBondResponse
	(*MsgSellBond)(nil),               // 2: regen.bond.v1alpha1.MsgSellBond
	(*MsgSellBondResponse)(nil),       // 3: regen.bond.v1alpha1.MsgSellBondResponse
	(*MsgMatureEmission)(nil),         // 4: regen.bond.v1alpha1.MsgMatureEmission
	(*MsgMatureEmissionResponse)(nil), // 5: regen.bond.v1alpha1.MsgMatureEmissionResponse
	(*timestamppb.Timestamp)(nil),     // 6: google.protobuf.Timestamp
}
var file_regen_bond_v1alpha1_tx_proto_depIdxs = []int32{
	6, // 0: regen.bond.v1alpha1.MsgIssueBond.issuance_date:type_name -> google.protobuf.Timestamp
	6, // 1: regen.bond.v1alpha1.MsgIssueBond.maturity_date:type_name -> google.protobuf.Timestamp
	0, // 2: regen.bond.v1alpha1.Msg.IssueBond:input_type -> regen.bond.v1alpha1.MsgIssueBond
	2, // 3: regen.bond.v1alpha1.Msg.SellBond:input_type -> regen.bond.v1alpha1.MsgSellBond
	1, // 4: regen.bond.v1alpha1.Msg.IssueBond:output_type -> regen.bond.v1alpha1.MsgIssueBondResponse
	1, // 5: regen.bond.v1alpha1.Msg.SellBond:output_type -> regen.bond.v1alpha1.MsgIssueBondResponse
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_regen_bond_v1alpha1_tx_proto_init() }
func file_regen_bond_v1alpha1_tx_proto_init() {
	if File_regen_bond_v1alpha1_tx_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_regen_bond_v1alpha1_tx_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgIssueBond); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_regen_bond_v1alpha1_tx_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgIssueBondResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_regen_bond_v1alpha1_tx_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgSellBond); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_regen_bond_v1alpha1_tx_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgSellBondResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_regen_bond_v1alpha1_tx_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgMatureEmission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_regen_bond_v1alpha1_tx_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgMatureEmissionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_regen_bond_v1alpha1_tx_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_regen_bond_v1alpha1_tx_proto_goTypes,
		DependencyIndexes: file_regen_bond_v1alpha1_tx_proto_depIdxs,
		MessageInfos:      file_regen_bond_v1alpha1_tx_proto_msgTypes,
	}.Build()
	File_regen_bond_v1alpha1_tx_proto = out.File
	file_regen_bond_v1alpha1_tx_proto_rawDesc = nil
	file_regen_bond_v1alpha1_tx_proto_goTypes = nil
	file_regen_bond_v1alpha1_tx_proto_depIdxs = nil
}
