// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package bondv1alpha1

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/gogo/protobuf/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_BondInfo                  protoreflect.MessageDescriptor
	fd_BondInfo_id               protoreflect.FieldDescriptor
	fd_BondInfo_emission_denom   protoreflect.FieldDescriptor
	fd_BondInfo_name             protoreflect.FieldDescriptor
	fd_BondInfo_holder           protoreflect.FieldDescriptor
	fd_BondInfo_parent_bond      protoreflect.FieldDescriptor
	fd_BondInfo_face_value       protoreflect.FieldDescriptor
	fd_BondInfo_face_currency    protoreflect.FieldDescriptor
	fd_BondInfo_creation_date    protoreflect.FieldDescriptor
	fd_BondInfo_issuance_date    protoreflect.FieldDescriptor
	fd_BondInfo_maturity_date    protoreflect.FieldDescriptor
	fd_BondInfo_coupon_rate      protoreflect.FieldDescriptor
	fd_BondInfo_coupon_frequency protoreflect.FieldDescriptor
	fd_BondInfo_status           protoreflect.FieldDescriptor
	fd_BondInfo_project          protoreflect.FieldDescriptor
	fd_BondInfo_metadata         protoreflect.FieldDescriptor
)

func init() {
	file_regen_bond_v1alpha1_types_proto_init()
	md_BondInfo = File_regen_bond_v1alpha1_types_proto.Messages().ByName("BondInfo")
	fd_BondInfo_id = md_BondInfo.Fields().ByName("id")
	fd_BondInfo_emission_denom = md_BondInfo.Fields().ByName("emission_denom")
	fd_BondInfo_name = md_BondInfo.Fields().ByName("name")
	fd_BondInfo_holder = md_BondInfo.Fields().ByName("holder")
	fd_BondInfo_parent_bond = md_BondInfo.Fields().ByName("parent_bond")
	fd_BondInfo_face_value = md_BondInfo.Fields().ByName("face_value")
	fd_BondInfo_face_currency = md_BondInfo.Fields().ByName("face_currency")
	fd_BondInfo_creation_date = md_BondInfo.Fields().ByName("creation_date")
	fd_BondInfo_issuance_date = md_BondInfo.Fields().ByName("issuance_date")
	fd_BondInfo_maturity_date = md_BondInfo.Fields().ByName("maturity_date")
	fd_BondInfo_coupon_rate = md_BondInfo.Fields().ByName("coupon_rate")
	fd_BondInfo_coupon_frequency = md_BondInfo.Fields().ByName("coupon_frequency")
	fd_BondInfo_status = md_BondInfo.Fields().ByName("status")
	fd_BondInfo_project = md_BondInfo.Fields().ByName("project")
	fd_BondInfo_metadata = md_BondInfo.Fields().ByName("metadata")
}

var _ protoreflect.Message = (*fastReflection_BondInfo)(nil)

type fastReflection_BondInfo BondInfo

func (x *BondInfo) ProtoReflect() protoreflect.Message {
	return (*fastReflection_BondInfo)(x)
}

func (x *BondInfo) slowProtoReflect() protoreflect.Message {
	mi := &file_regen_bond_v1alpha1_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_BondInfo_messageType fastReflection_BondInfo_messageType
var _ protoreflect.MessageType = fastReflection_BondInfo_messageType{}

type fastReflection_BondInfo_messageType struct{}

func (x fastReflection_BondInfo_messageType) Zero() protoreflect.Message {
	return (*fastReflection_BondInfo)(nil)
}
func (x fastReflection_BondInfo_messageType) New() protoreflect.Message {
	return new(fastReflection_BondInfo)
}
func (x fastReflection_BondInfo_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_BondInfo
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_BondInfo) Descriptor() protoreflect.MessageDescriptor {
	return md_BondInfo
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_BondInfo) Type() protoreflect.MessageType {
	return _fastReflection_BondInfo_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_BondInfo) New() protoreflect.Message {
	return new(fastReflection_BondInfo)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_BondInfo) Interface() protoreflect.ProtoMessage {
	return (*BondInfo)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_BondInfo) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != "" {
		value := protoreflect.ValueOfString(x.Id)
		if !f(fd_BondInfo_id, value) {
			return
		}
	}
	if x.EmissionDenom != "" {
		value := protoreflect.ValueOfString(x.EmissionDenom)
		if !f(fd_BondInfo_emission_denom, value) {
			return
		}
	}
	if x.Name != "" {
		value := protoreflect.ValueOfString(x.Name)
		if !f(fd_BondInfo_name, value) {
			return
		}
	}
	if x.Holder != "" {
		value := protoreflect.ValueOfString(x.Holder)
		if !f(fd_BondInfo_holder, value) {
			return
		}
	}
	if x.ParentBond != "" {
		value := protoreflect.ValueOfString(x.ParentBond)
		if !f(fd_BondInfo_parent_bond, value) {
			return
		}
	}
	if x.FaceValue != "" {
		value := protoreflect.ValueOfString(x.FaceValue)
		if !f(fd_BondInfo_face_value, value) {
			return
		}
	}
	if x.FaceCurrency != "" {
		value := protoreflect.ValueOfString(x.FaceCurrency)
		if !f(fd_BondInfo_face_currency, value) {
			return
		}
	}
	if x.CreationDate != "" {
		value := protoreflect.ValueOfString(x.CreationDate)
		if !f(fd_BondInfo_creation_date, value) {
			return
		}
	}
	if x.IssuanceDate != "" {
		value := protoreflect.ValueOfString(x.IssuanceDate)
		if !f(fd_BondInfo_issuance_date, value) {
			return
		}
	}
	if x.MaturityDate != "" {
		value := protoreflect.ValueOfString(x.MaturityDate)
		if !f(fd_BondInfo_maturity_date, value) {
			return
		}
	}
	if x.CouponRate != "" {
		value := protoreflect.ValueOfString(x.CouponRate)
		if !f(fd_BondInfo_coupon_rate, value) {
			return
		}
	}
	if x.CouponFrequency != "" {
		value := protoreflect.ValueOfString(x.CouponFrequency)
		if !f(fd_BondInfo_coupon_frequency, value) {
			return
		}
	}
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_BondInfo_status, value) {
			return
		}
	}
	if x.Project != "" {
		value := protoreflect.ValueOfString(x.Project)
		if !f(fd_BondInfo_project, value) {
			return
		}
	}
	if x.Metadata != "" {
		value := protoreflect.ValueOfString(x.Metadata)
		if !f(fd_BondInfo_metadata, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_BondInfo) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "regen.bond.v1alpha1.BondInfo.id":
		return x.Id != ""
	case "regen.bond.v1alpha1.BondInfo.emission_denom":
		return x.EmissionDenom != ""
	case "regen.bond.v1alpha1.BondInfo.name":
		return x.Name != ""
	case "regen.bond.v1alpha1.BondInfo.holder":
		return x.Holder != ""
	case "regen.bond.v1alpha1.BondInfo.parent_bond":
		return x.ParentBond != ""
	case "regen.bond.v1alpha1.BondInfo.face_value":
		return x.FaceValue != ""
	case "regen.bond.v1alpha1.BondInfo.face_currency":
		return x.FaceCurrency != ""
	case "regen.bond.v1alpha1.BondInfo.creation_date":
		return x.CreationDate != ""
	case "regen.bond.v1alpha1.BondInfo.issuance_date":
		return x.IssuanceDate != ""
	case "regen.bond.v1alpha1.BondInfo.maturity_date":
		return x.MaturityDate != ""
	case "regen.bond.v1alpha1.BondInfo.coupon_rate":
		return x.CouponRate != ""
	case "regen.bond.v1alpha1.BondInfo.coupon_frequency":
		return x.CouponFrequency != ""
	case "regen.bond.v1alpha1.BondInfo.status":
		return x.Status != 0
	case "regen.bond.v1alpha1.BondInfo.project":
		return x.Project != ""
	case "regen.bond.v1alpha1.BondInfo.metadata":
		return x.Metadata != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.bond.v1alpha1.BondInfo"))
		}
		panic(fmt.Errorf("message regen.bond.v1alpha1.BondInfo does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BondInfo) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "regen.bond.v1alpha1.BondInfo.id":
		x.Id = ""
	case "regen.bond.v1alpha1.BondInfo.emission_denom":
		x.EmissionDenom = ""
	case "regen.bond.v1alpha1.BondInfo.name":
		x.Name = ""
	case "regen.bond.v1alpha1.BondInfo.holder":
		x.Holder = ""
	case "regen.bond.v1alpha1.BondInfo.parent_bond":
		x.ParentBond = ""
	case "regen.bond.v1alpha1.BondInfo.face_value":
		x.FaceValue = ""
	case "regen.bond.v1alpha1.BondInfo.face_currency":
		x.FaceCurrency = ""
	case "regen.bond.v1alpha1.BondInfo.creation_date":
		x.CreationDate = ""
	case "regen.bond.v1alpha1.BondInfo.issuance_date":
		x.IssuanceDate = ""
	case "regen.bond.v1alpha1.BondInfo.maturity_date":
		x.MaturityDate = ""
	case "regen.bond.v1alpha1.BondInfo.coupon_rate":
		x.CouponRate = ""
	case "regen.bond.v1alpha1.BondInfo.coupon_frequency":
		x.CouponFrequency = ""
	case "regen.bond.v1alpha1.BondInfo.status":
		x.Status = 0
	case "regen.bond.v1alpha1.BondInfo.project":
		x.Project = ""
	case "regen.bond.v1alpha1.BondInfo.metadata":
		x.Metadata = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.bond.v1alpha1.BondInfo"))
		}
		panic(fmt.Errorf("message regen.bond.v1alpha1.BondInfo does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_BondInfo) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "regen.bond.v1alpha1.BondInfo.id":
		value := x.Id
		return protoreflect.ValueOfString(value)
	case "regen.bond.v1alpha1.BondInfo.emission_denom":
		value := x.EmissionDenom
		return protoreflect.ValueOfString(value)
	case "regen.bond.v1alpha1.BondInfo.name":
		value := x.Name
		return protoreflect.ValueOfString(value)
	case "regen.bond.v1alpha1.BondInfo.holder":
		value := x.Holder
		return protoreflect.ValueOfString(value)
	case "regen.bond.v1alpha1.BondInfo.parent_bond":
		value := x.ParentBond
		return protoreflect.ValueOfString(value)
	case "regen.bond.v1alpha1.BondInfo.face_value":
		value := x.FaceValue
		return protoreflect.ValueOfString(value)
	case "regen.bond.v1alpha1.BondInfo.face_currency":
		value := x.FaceCurrency
		return protoreflect.ValueOfString(value)
	case "regen.bond.v1alpha1.BondInfo.creation_date":
		value := x.CreationDate
		return protoreflect.ValueOfString(value)
	case "regen.bond.v1alpha1.BondInfo.issuance_date":
		value := x.IssuanceDate
		return protoreflect.ValueOfString(value)
	case "regen.bond.v1alpha1.BondInfo.maturity_date":
		value := x.MaturityDate
		return protoreflect.ValueOfString(value)
	case "regen.bond.v1alpha1.BondInfo.coupon_rate":
		value := x.CouponRate
		return protoreflect.ValueOfString(value)
	case "regen.bond.v1alpha1.BondInfo.coupon_frequency":
		value := x.CouponFrequency
		return protoreflect.ValueOfString(value)
	case "regen.bond.v1alpha1.BondInfo.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "regen.bond.v1alpha1.BondInfo.project":
		value := x.Project
		return protoreflect.ValueOfString(value)
	case "regen.bond.v1alpha1.BondInfo.metadata":
		value := x.Metadata
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.bond.v1alpha1.BondInfo"))
		}
		panic(fmt.Errorf("message regen.bond.v1alpha1.BondInfo does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BondInfo) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "regen.bond.v1alpha1.BondInfo.id":
		x.Id = value.Interface().(string)
	case "regen.bond.v1alpha1.BondInfo.emission_denom":
		x.EmissionDenom = value.Interface().(string)
	case "regen.bond.v1alpha1.BondInfo.name":
		x.Name = value.Interface().(string)
	case "regen.bond.v1alpha1.BondInfo.holder":
		x.Holder = value.Interface().(string)
	case "regen.bond.v1alpha1.BondInfo.parent_bond":
		x.ParentBond = value.Interface().(string)
	case "regen.bond.v1alpha1.BondInfo.face_value":
		x.FaceValue = value.Interface().(string)
	case "regen.bond.v1alpha1.BondInfo.face_currency":
		x.FaceCurrency = value.Interface().(string)
	case "regen.bond.v1alpha1.BondInfo.creation_date":
		x.CreationDate = value.Interface().(string)
	case "regen.bond.v1alpha1.BondInfo.issuance_date":
		x.IssuanceDate = value.Interface().(string)
	case "regen.bond.v1alpha1.BondInfo.maturity_date":
		x.MaturityDate = value.Interface().(string)
	case "regen.bond.v1alpha1.BondInfo.coupon_rate":
		x.CouponRate = value.Interface().(string)
	case "regen.bond.v1alpha1.BondInfo.coupon_frequency":
		x.CouponFrequency = value.Interface().(string)
	case "regen.bond.v1alpha1.BondInfo.status":
		x.Status = (BondInfo_Status)(value.Enum())
	case "regen.bond.v1alpha1.BondInfo.project":
		x.Project = value.Interface().(string)
	case "regen.bond.v1alpha1.BondInfo.metadata":
		x.Metadata = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.bond.v1alpha1.BondInfo"))
		}
		panic(fmt.Errorf("message regen.bond.v1alpha1.BondInfo does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BondInfo) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "regen.bond.v1alpha1.BondInfo.id":
		panic(fmt.Errorf("field id of message regen.bond.v1alpha1.BondInfo is not mutable"))
	case "regen.bond.v1alpha1.BondInfo.emission_denom":
		panic(fmt.Errorf("field emission_denom of message regen.bond.v1alpha1.BondInfo is not mutable"))
	case "regen.bond.v1alpha1.BondInfo.name":
		panic(fmt.Errorf("field name of message regen.bond.v1alpha1.BondInfo is not mutable"))
	case "regen.bond.v1alpha1.BondInfo.holder":
		panic(fmt.Errorf("field holder of message regen.bond.v1alpha1.BondInfo is not mutable"))
	case "regen.bond.v1alpha1.BondInfo.parent_bond":
		panic(fmt.Errorf("field parent_bond of message regen.bond.v1alpha1.BondInfo is not mutable"))
	case "regen.bond.v1alpha1.BondInfo.face_value":
		panic(fmt.Errorf("field face_value of message regen.bond.v1alpha1.BondInfo is not mutable"))
	case "regen.bond.v1alpha1.BondInfo.face_currency":
		panic(fmt.Errorf("field face_currency of message regen.bond.v1alpha1.BondInfo is not mutable"))
	case "regen.bond.v1alpha1.BondInfo.creation_date":
		panic(fmt.Errorf("field creation_date of message regen.bond.v1alpha1.BondInfo is not mutable"))
	case "regen.bond.v1alpha1.BondInfo.issuance_date":
		panic(fmt.Errorf("field issuance_date of message regen.bond.v1alpha1.BondInfo is not mutable"))
	case "regen.bond.v1alpha1.BondInfo.maturity_date":
		panic(fmt.Errorf("field maturity_date of message regen.bond.v1alpha1.BondInfo is not mutable"))
	case "regen.bond.v1alpha1.BondInfo.coupon_rate":
		panic(fmt.Errorf("field coupon_rate of message regen.bond.v1alpha1.BondInfo is not mutable"))
	case "regen.bond.v1alpha1.BondInfo.coupon_frequency":
		panic(fmt.Errorf("field coupon_frequency of message regen.bond.v1alpha1.BondInfo is not mutable"))
	case "regen.bond.v1alpha1.BondInfo.status":
		panic(fmt.Errorf("field status of message regen.bond.v1alpha1.BondInfo is not mutable"))
	case "regen.bond.v1alpha1.BondInfo.project":
		panic(fmt.Errorf("field project of message regen.bond.v1alpha1.BondInfo is not mutable"))
	case "regen.bond.v1alpha1.BondInfo.metadata":
		panic(fmt.Errorf("field metadata of message regen.bond.v1alpha1.BondInfo is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.bond.v1alpha1.BondInfo"))
		}
		panic(fmt.Errorf("message regen.bond.v1alpha1.BondInfo does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_BondInfo) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "regen.bond.v1alpha1.BondInfo.id":
		return protoreflect.ValueOfString("")
	case "regen.bond.v1alpha1.BondInfo.emission_denom":
		return protoreflect.ValueOfString("")
	case "regen.bond.v1alpha1.BondInfo.name":
		return protoreflect.ValueOfString("")
	case "regen.bond.v1alpha1.BondInfo.holder":
		return protoreflect.ValueOfString("")
	case "regen.bond.v1alpha1.BondInfo.parent_bond":
		return protoreflect.ValueOfString("")
	case "regen.bond.v1alpha1.BondInfo.face_value":
		return protoreflect.ValueOfString("")
	case "regen.bond.v1alpha1.BondInfo.face_currency":
		return protoreflect.ValueOfString("")
	case "regen.bond.v1alpha1.BondInfo.creation_date":
		return protoreflect.ValueOfString("")
	case "regen.bond.v1alpha1.BondInfo.issuance_date":
		return protoreflect.ValueOfString("")
	case "regen.bond.v1alpha1.BondInfo.maturity_date":
		return protoreflect.ValueOfString("")
	case "regen.bond.v1alpha1.BondInfo.coupon_rate":
		return protoreflect.ValueOfString("")
	case "regen.bond.v1alpha1.BondInfo.coupon_frequency":
		return protoreflect.ValueOfString("")
	case "regen.bond.v1alpha1.BondInfo.status":
		return protoreflect.ValueOfEnum(0)
	case "regen.bond.v1alpha1.BondInfo.project":
		return protoreflect.ValueOfString("")
	case "regen.bond.v1alpha1.BondInfo.metadata":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.bond.v1alpha1.BondInfo"))
		}
		panic(fmt.Errorf("message regen.bond.v1alpha1.BondInfo does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_BondInfo) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in regen.bond.v1alpha1.BondInfo", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_BondInfo) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BondInfo) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_BondInfo) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_BondInfo) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*BondInfo)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Id)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.EmissionDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Name)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Holder)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ParentBond)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.FaceValue)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.FaceCurrency)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.CreationDate)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.IssuanceDate)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.MaturityDate)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.CouponRate)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.CouponFrequency)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Status != 0 {
			n += 1 + runtime.Sov(uint64(x.Status))
		}
		l = len(x.Project)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Metadata)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*BondInfo)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Metadata) > 0 {
			i -= len(x.Metadata)
			copy(dAtA[i:], x.Metadata)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Metadata)))
			i--
			dAtA[i] = 0x7a
		}
		if len(x.Project) > 0 {
			i -= len(x.Project)
			copy(dAtA[i:], x.Project)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Project)))
			i--
			dAtA[i] = 0x72
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x68
		}
		if len(x.CouponFrequency) > 0 {
			i -= len(x.CouponFrequency)
			copy(dAtA[i:], x.CouponFrequency)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CouponFrequency)))
			i--
			dAtA[i] = 0x62
		}
		if len(x.CouponRate) > 0 {
			i -= len(x.CouponRate)
			copy(dAtA[i:], x.CouponRate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CouponRate)))
			i--
			dAtA[i] = 0x5a
		}
		if len(x.MaturityDate) > 0 {
			i -= len(x.MaturityDate)
			copy(dAtA[i:], x.MaturityDate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MaturityDate)))
			i--
			dAtA[i] = 0x52
		}
		if len(x.IssuanceDate) > 0 {
			i -= len(x.IssuanceDate)
			copy(dAtA[i:], x.IssuanceDate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.IssuanceDate)))
			i--
			dAtA[i] = 0x4a
		}
		if len(x.CreationDate) > 0 {
			i -= len(x.CreationDate)
			copy(dAtA[i:], x.CreationDate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CreationDate)))
			i--
			dAtA[i] = 0x42
		}
		if len(x.FaceCurrency) > 0 {
			i -= len(x.FaceCurrency)
			copy(dAtA[i:], x.FaceCurrency)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.FaceCurrency)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.FaceValue) > 0 {
			i -= len(x.FaceValue)
			copy(dAtA[i:], x.FaceValue)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.FaceValue)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.ParentBond) > 0 {
			i -= len(x.ParentBond)
			copy(dAtA[i:], x.ParentBond)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ParentBond)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.Holder) > 0 {
			i -= len(x.Holder)
			copy(dAtA[i:], x.Holder)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Holder)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.Name) > 0 {
			i -= len(x.Name)
			copy(dAtA[i:], x.Name)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Name)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.EmissionDenom) > 0 {
			i -= len(x.EmissionDenom)
			copy(dAtA[i:], x.EmissionDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.EmissionDenom)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Id) > 0 {
			i -= len(x.Id)
			copy(dAtA[i:], x.Id)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Id)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*BondInfo)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: BondInfo: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: BondInfo: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Id = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EmissionDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EmissionDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Name = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Holder", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Holder = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ParentBond", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ParentBond = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FaceValue", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FaceValue = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FaceCurrency", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FaceCurrency = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CreationDate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CreationDate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IssuanceDate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.IssuanceDate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaturityDate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MaturityDate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CouponRate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CouponRate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CouponFrequency", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CouponFrequency = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 13:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= BondInfo_Status(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 14:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Project", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Project = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 15:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Metadata = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: regen/bond/v1alpha1/types.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BondInfo_Status int32

const (
	BondInfo_ACTIVE  BondInfo_Status = 0
	BondInfo_CLOSED  BondInfo_Status = 1
	BondInfo_MATURED BondInfo_Status = 2
)

// Enum value maps for BondInfo_Status.
var (
	BondInfo_Status_name = map[int32]string{
		0: "ACTIVE",
		1: "CLOSED",
		2: "MATURED",
	}
	BondInfo_Status_value = map[string]int32{
		"ACTIVE":  0,
		"CLOSED":  1,
		"MATURED": 2,
	}
)

func (x BondInfo_Status) Enum() *BondInfo_Status {
	p := new(BondInfo_Status)
	*p = x
	return p
}

func (x BondInfo_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BondInfo_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_regen_bond_v1alpha1_types_proto_enumTypes[0].Descriptor()
}

func (BondInfo_Status) Type() protoreflect.EnumType {
	return &file_regen_bond_v1alpha1_types_proto_enumTypes[0]
}

func (x BondInfo_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BondInfo_Status.Descriptor instead.
func (BondInfo_Status) EnumDescriptor() ([]byte, []int) {
	return file_regen_bond_v1alpha1_types_proto_rawDescGZIP(), []int{0, 0}
}

// BatchInfo represents the high-level on-chain information for a bond.
type BondInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the unique ID of bond.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// emission_denom is the unique id of emission
	EmissionDenom   string          `protobuf:"bytes,2,opt,name=emission_denom,json=emissionDenom,proto3" json:"emission_denom,omitempty"`
	Name            string          `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Holder          string          `protobuf:"bytes,4,opt,name=holder,proto3" json:"holder,omitempty"`
	ParentBond      string          `protobuf:"bytes,5,opt,name=parent_bond,json=parentBond,proto3" json:"parent_bond,omitempty"`
	FaceValue       string          `protobuf:"bytes,6,opt,name=face_value,json=faceValue,proto3" json:"face_value,omitempty"`
	FaceCurrency    string          `protobuf:"bytes,7,opt,name=face_currency,json=faceCurrency,proto3" json:"face_currency,omitempty"`
	CreationDate    string          `protobuf:"bytes,8,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
	IssuanceDate    string          `protobuf:"bytes,9,opt,name=issuance_date,json=issuanceDate,proto3" json:"issuance_date,omitempty"`
	MaturityDate    string          `protobuf:"bytes,10,opt,name=maturity_date,json=maturityDate,proto3" json:"maturity_date,omitempty"`
	CouponRate      string          `protobuf:"bytes,11,opt,name=coupon_rate,json=couponRate,proto3" json:"coupon_rate,omitempty"`
	CouponFrequency string          `protobuf:"bytes,12,opt,name=coupon_frequency,json=couponFrequency,proto3" json:"coupon_frequency,omitempty"`
	Status          BondInfo_Status `protobuf:"varint,13,opt,name=status,proto3,enum=regen.bond.v1alpha1.BondInfo_Status" json:"status,omitempty"`
	Project         string          `protobuf:"bytes,14,opt,name=project,proto3" json:"project,omitempty"`
	Metadata        string          `protobuf:"bytes,15,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *BondInfo) Reset() {
	*x = BondInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_regen_bond_v1alpha1_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BondInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BondInfo) ProtoMessage() {}

// Deprecated: Use BondInfo.ProtoReflect.Descriptor instead.
func (*BondInfo) Descriptor() ([]byte, []int) {
	return file_regen_bond_v1alpha1_types_proto_rawDescGZIP(), []int{0}
}

func (x *BondInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BondInfo) GetEmissionDenom() string {
	if x != nil {
		return x.EmissionDenom
	}
	return ""
}

func (x *BondInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BondInfo) GetHolder() string {
	if x != nil {
		return x.Holder
	}
	return ""
}

func (x *BondInfo) GetParentBond() string {
	if x != nil {
		return x.ParentBond
	}
	return ""
}

func (x *BondInfo) GetFaceValue() string {
	if x != nil {
		return x.FaceValue
	}
	return ""
}

func (x *BondInfo) GetFaceCurrency() string {
	if x != nil {
		return x.FaceCurrency
	}
	return ""
}

func (x *BondInfo) GetCreationDate() string {
	if x != nil {
		return x.CreationDate
	}
	return ""
}

func (x *BondInfo) GetIssuanceDate() string {
	if x != nil {
		return x.IssuanceDate
	}
	return ""
}

func (x *BondInfo) GetMaturityDate() string {
	if x != nil {
		return x.MaturityDate
	}
	return ""
}

func (x *BondInfo) GetCouponRate() string {
	if x != nil {
		return x.CouponRate
	}
	return ""
}

func (x *BondInfo) GetCouponFrequency() string {
	if x != nil {
		return x.CouponFrequency
	}
	return ""
}

func (x *BondInfo) GetStatus() BondInfo_Status {
	if x != nil {
		return x.Status
	}
	return BondInfo_ACTIVE
}

func (x *BondInfo) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *BondInfo) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

var File_regen_bond_v1alpha1_types_proto protoreflect.FileDescriptor

var file_regen_bond_v1alpha1_types_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x2f, 0x62, 0x6f, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x13, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x62, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb0, 0x04,
	0x0a, 0x08, 0x42, 0x6f, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x65, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6e, 0x6f,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x6e, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x66, 0x61, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x61, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x73, 0x75, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3c, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e,
	0x72, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x62, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x42, 0x6f, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x2d, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x4f, 0x53, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x41, 0x54, 0x55, 0x52, 0x45, 0x44, 0x10, 0x02,
	0x42, 0xdf, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x62,
	0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x0a, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4a, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x2d, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x2d, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x2f, 0x62, 0x6f, 0x6e, 0x64,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x62, 0x6f, 0x6e, 0x64, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x52, 0x42, 0x58, 0xaa, 0x02, 0x13, 0x52,
	0x65, 0x67, 0x65, 0x6e, 0x2e, 0x42, 0x6f, 0x6e, 0x64, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0xca, 0x02, 0x13, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x5c, 0x42, 0x6f, 0x6e, 0x64, 0x5c,
	0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x1f, 0x52, 0x65, 0x67, 0x65, 0x6e,
	0x5c, 0x42, 0x6f, 0x6e, 0x64, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x15, 0x52, 0x65, 0x67,
	0x65, 0x6e, 0x3a, 0x3a, 0x42, 0x6f, 0x6e, 0x64, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_regen_bond_v1alpha1_types_proto_rawDescOnce sync.Once
	file_regen_bond_v1alpha1_types_proto_rawDescData = file_regen_bond_v1alpha1_types_proto_rawDesc
)

func file_regen_bond_v1alpha1_types_proto_rawDescGZIP() []byte {
	file_regen_bond_v1alpha1_types_proto_rawDescOnce.Do(func() {
		file_regen_bond_v1alpha1_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_regen_bond_v1alpha1_types_proto_rawDescData)
	})
	return file_regen_bond_v1alpha1_types_proto_rawDescData
}

var file_regen_bond_v1alpha1_types_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_regen_bond_v1alpha1_types_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_regen_bond_v1alpha1_types_proto_goTypes = []interface{}{
	(BondInfo_Status)(0), // 0: regen.bond.v1alpha1.BondInfo.Status
	(*BondInfo)(nil),     // 1: regen.bond.v1alpha1.BondInfo
}
var file_regen_bond_v1alpha1_types_proto_depIdxs = []int32{
	0, // 0: regen.bond.v1alpha1.BondInfo.status:type_name -> regen.bond.v1alpha1.BondInfo.Status
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_regen_bond_v1alpha1_types_proto_init() }
func file_regen_bond_v1alpha1_types_proto_init() {
	if File_regen_bond_v1alpha1_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_regen_bond_v1alpha1_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BondInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_regen_bond_v1alpha1_types_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_regen_bond_v1alpha1_types_proto_goTypes,
		DependencyIndexes: file_regen_bond_v1alpha1_types_proto_depIdxs,
		EnumInfos:         file_regen_bond_v1alpha1_types_proto_enumTypes,
		MessageInfos:      file_regen_bond_v1alpha1_types_proto_msgTypes,
	}.Build()
	File_regen_bond_v1alpha1_types_proto = out.File
	file_regen_bond_v1alpha1_types_proto_rawDesc = nil
	file_regen_bond_v1alpha1_types_proto_goTypes = nil
	file_regen_bond_v1alpha1_types_proto_depIdxs = nil
}
