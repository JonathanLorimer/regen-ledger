// Code generated by protoc-gen-go-cosmos-orm. DO NOT EDIT.

package orderbookv1beta1

import (
	context "context"
	ormdb "github.com/cosmos/cosmos-sdk/orm/model/ormdb"
	ormlist "github.com/cosmos/cosmos-sdk/orm/model/ormlist"
	ormtable "github.com/cosmos/cosmos-sdk/orm/model/ormtable"
	ormerrors "github.com/cosmos/cosmos-sdk/orm/types/ormerrors"
)

type SellOrderStore interface {
	Insert(ctx context.Context, sellOrder *SellOrder) error
	Update(ctx context.Context, sellOrder *SellOrder) error
	Save(ctx context.Context, sellOrder *SellOrder) error
	Delete(ctx context.Context, sellOrder *SellOrder) error
	Has(ctx context.Context, sell_order_id uint64) (found bool, err error)
	Get(ctx context.Context, sell_order_id uint64) (*SellOrder, error)
	List(ctx context.Context, prefixKey SellOrderIndexKey, opts ...ormlist.Option) (SellOrderIterator, error)
	ListRange(ctx context.Context, from, to SellOrderIndexKey, opts ...ormlist.Option) (SellOrderIterator, error)

	doNotImplement()
}

type SellOrderIterator struct {
	ormtable.Iterator
}

func (i SellOrderIterator) Value() (*SellOrder, error) {
	var sellOrder SellOrder
	err := i.UnmarshalMessage(&sellOrder)
	return &sellOrder, err
}

type SellOrderIndexKey interface {
	id() uint32
	values() []interface{}
	sellOrderIndexKey()
}

// primary key starting index..
type SellOrderPrimaryKey = SellOrderSellOrderIdIndexKey

type SellOrderSellOrderIdIndexKey struct {
	vs []interface{}
}

func (x SellOrderSellOrderIdIndexKey) id() uint32            { return 0 }
func (x SellOrderSellOrderIdIndexKey) values() []interface{} { return x.vs }
func (x SellOrderSellOrderIdIndexKey) sellOrderIndexKey()    {}

func (this SellOrderSellOrderIdIndexKey) WithSellOrderId(sell_order_id uint64) SellOrderSellOrderIdIndexKey {
	this.vs = []interface{}{sell_order_id}
	return this
}

type SellOrderMarketIdClassIdAskPriceU32IndexKey struct {
	vs []interface{}
}

func (x SellOrderMarketIdClassIdAskPriceU32IndexKey) id() uint32            { return 1 }
func (x SellOrderMarketIdClassIdAskPriceU32IndexKey) values() []interface{} { return x.vs }
func (x SellOrderMarketIdClassIdAskPriceU32IndexKey) sellOrderIndexKey()    {}

func (this SellOrderMarketIdClassIdAskPriceU32IndexKey) WithMarketId(market_id uint64) SellOrderMarketIdClassIdAskPriceU32IndexKey {
	this.vs = []interface{}{market_id}
	return this
}

func (this SellOrderMarketIdClassIdAskPriceU32IndexKey) WithMarketIdClassId(market_id uint64, class_id uint64) SellOrderMarketIdClassIdAskPriceU32IndexKey {
	this.vs = []interface{}{market_id, class_id}
	return this
}

func (this SellOrderMarketIdClassIdAskPriceU32IndexKey) WithMarketIdClassIdAskPriceU32(market_id uint64, class_id uint64, ask_price_u32 uint32) SellOrderMarketIdClassIdAskPriceU32IndexKey {
	this.vs = []interface{}{market_id, class_id, ask_price_u32}
	return this
}

type SellOrderMarketIdProjectIdAskPriceU32IndexKey struct {
	vs []interface{}
}

func (x SellOrderMarketIdProjectIdAskPriceU32IndexKey) id() uint32            { return 2 }
func (x SellOrderMarketIdProjectIdAskPriceU32IndexKey) values() []interface{} { return x.vs }
func (x SellOrderMarketIdProjectIdAskPriceU32IndexKey) sellOrderIndexKey()    {}

func (this SellOrderMarketIdProjectIdAskPriceU32IndexKey) WithMarketId(market_id uint64) SellOrderMarketIdProjectIdAskPriceU32IndexKey {
	this.vs = []interface{}{market_id}
	return this
}

func (this SellOrderMarketIdProjectIdAskPriceU32IndexKey) WithMarketIdProjectId(market_id uint64, project_id uint64) SellOrderMarketIdProjectIdAskPriceU32IndexKey {
	this.vs = []interface{}{market_id, project_id}
	return this
}

func (this SellOrderMarketIdProjectIdAskPriceU32IndexKey) WithMarketIdProjectIdAskPriceU32(market_id uint64, project_id uint64, ask_price_u32 uint32) SellOrderMarketIdProjectIdAskPriceU32IndexKey {
	this.vs = []interface{}{market_id, project_id, ask_price_u32}
	return this
}

type sellOrderStore struct {
	table ormtable.Table
}

func (this sellOrderStore) Insert(ctx context.Context, sellOrder *SellOrder) error {
	return this.table.Insert(ctx, sellOrder)
}

func (this sellOrderStore) Update(ctx context.Context, sellOrder *SellOrder) error {
	return this.table.Update(ctx, sellOrder)
}

func (this sellOrderStore) Save(ctx context.Context, sellOrder *SellOrder) error {
	return this.table.Save(ctx, sellOrder)
}

func (this sellOrderStore) Delete(ctx context.Context, sellOrder *SellOrder) error {
	return this.table.Delete(ctx, sellOrder)
}

func (this sellOrderStore) Has(ctx context.Context, sell_order_id uint64) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, sell_order_id)
}

func (this sellOrderStore) Get(ctx context.Context, sell_order_id uint64) (*SellOrder, error) {
	var sellOrder SellOrder
	found, err := this.table.PrimaryKey().Get(ctx, &sellOrder, sell_order_id)
	if !found {
		return nil, err
	}
	return &sellOrder, err
}

func (this sellOrderStore) List(ctx context.Context, prefixKey SellOrderIndexKey, opts ...ormlist.Option) (SellOrderIterator, error) {
	opts = append(opts, ormlist.Prefix(prefixKey.values()...))
	it, err := this.table.GetIndexByID(prefixKey.id()).Iterator(ctx, opts...)
	return SellOrderIterator{it}, err
}

func (this sellOrderStore) ListRange(ctx context.Context, from, to SellOrderIndexKey, opts ...ormlist.Option) (SellOrderIterator, error) {
	opts = append(opts, ormlist.Start(from.values()...), ormlist.End(to.values()...))
	it, err := this.table.GetIndexByID(from.id()).Iterator(ctx, opts...)
	return SellOrderIterator{it}, err
}

func (this sellOrderStore) doNotImplement() {}

var _ SellOrderStore = sellOrderStore{}

func NewSellOrderStore(db ormdb.ModuleDB) (SellOrderStore, error) {
	table := db.GetTable(&SellOrder{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&SellOrder{}).ProtoReflect().Descriptor().FullName()))
	}
	return sellOrderStore{table}, nil
}

type MemoryStore interface {
	SellOrderStore() SellOrderStore

	doNotImplement()
}

type memoryStore struct {
	sellOrder SellOrderStore
}

func (x memoryStore) SellOrderStore() SellOrderStore {
	return x.sellOrder
}

func (memoryStore) doNotImplement() {}

var _ MemoryStore = memoryStore{}

func NewMemoryStore(db ormdb.ModuleDB) (MemoryStore, error) {
	sellOrderStore, err := NewSellOrderStore(db)
	if err != nil {
		return nil, err
	}

	return memoryStore{
		sellOrderStore,
	}, nil
}
