syntax = "proto3";

package regen.ecocredit.orderbook.v1beta1;

import "cosmos/orm/v1alpha1/orm.proto";

// BuyOrderAssetMatch indexes buy orders which match assets and can be
// indexed by either buy_order_id or asset_id.
message BuyOrderAssetMatch {
  option (cosmos.orm.v1alpha1.table) = {
    id: 1
    primary_key: { fields: "buy_order_id, asset_id" }
    index: { id: 1; fields: "asset_id"}
  };

  uint64 buy_order_id = 1;
  uint64 asset_id = 2;
}

// BuyOrderSellOrderMatch defines the data the matching algorithm will use to actually match buy and sell orders.
message BuyOrderSellOrderMatch {
  option (cosmos.orm.v1alpha1.table) = {
    id: 2

    // the primary key of the table is simple the buy_order_id,sell_order_id pair as these pairs are unique
    primary_key: { fields: "buy_order_id,sell_order_id" }

    // Algorithm details:
    // this index is what does the magic - it basically sorts our orders for us and more or less does the matching.
    // Basically we iterate over all bid prices within a given denom from high to low. The highest bidding orders always get filled first, and if one bid is the same price as another, the earlier bid wins - since buy order IDs are assigned incrementally we get this for free.
    // Then within a given buy order, we iterate over all the matching sell orders from the lowest to highest ask price. So the highest bids and lowest asks get filled first. If the ask price is the same, then earlier sell orders get filled first (again we get this from the sell order ID which is assigned incrementally).
    index: { id: 1; fields: "bid_denom_id,bid_price_complement,buy_order_id,ask_price,sell_order_id";
      //name: "order_book_match"
    }

    // this index is used to delete matches once sell orders are filled
    index: { id: 2, fields: "sell_order_id" }
  };

  // bid_denom_id defines the bid denom being used by the buy and sell orders. Matching always happens within a single bid denom.

  uint32 bid_denom_id = 1;
  uint64 buy_order_id = 2;
  uint64 sell_order_id = 3;

  // bid_price_complement is the the complement (~ operator) of the bid price encoded as a uint64 (which should have sufficient precision) - effectively ~price * 10^exponent (usually 10^6). The complement is used so that orders can that bids can be sorted high to low.
  uint64 bid_price_complement = 4;

  // ask_price is of the ask price encoded to a uint64. Ask prices are sorted low to high.
  uint64 ask_price = 5;
}