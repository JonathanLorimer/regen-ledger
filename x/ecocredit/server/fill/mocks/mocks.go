// Code generated by MockGen. DO NOT EDIT.
// Source: x/ecocredit/fill/manager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	"github.com/regen-network/regen-ledger/x/ecocredit/server/fill"

	types "github.com/cosmos/cosmos-sdk/types"
	gomock "github.com/golang/mock/gomock"
	v1beta1 "github.com/regen-network/regen-ledger/api/regen/ecocredit/marketplace/v1beta1"
	math "github.com/regen-network/regen-ledger/types/math"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// Fill mocks base method.
func (m *MockManager) Fill(ctx context.Context, market *v1beta1.Market, buyOrder *v1beta1.BuyOrder, sellOrder *v1beta1.SellOrder) (fill.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fill", ctx, market, buyOrder, sellOrder)
	ret0, _ := ret[0].(fill.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fill indicates an expected call of Fill.
func (mr *MockManagerMockRecorder) Fill(ctx, market, buyOrder, sellOrder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fill", reflect.TypeOf((*MockManager)(nil).Fill), ctx, market, buyOrder, sellOrder)
}

// MockTransferManager is a mock of TransferManager interface.
type MockTransferManager struct {
	ctrl     *gomock.Controller
	recorder *MockTransferManagerMockRecorder
}

// MockTransferManagerMockRecorder is the mock recorder for MockTransferManager.
type MockTransferManagerMockRecorder struct {
	mock *MockTransferManager
}

// NewMockTransferManager creates a new mock instance.
func NewMockTransferManager(ctrl *gomock.Controller) *MockTransferManager {
	mock := &MockTransferManager{ctrl: ctrl}
	mock.recorder = &MockTransferManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransferManager) EXPECT() *MockTransferManagerMockRecorder {
	return m.recorder
}

// SendCoinsTo mocks base method.
func (m *MockTransferManager) SendCoinsTo(denom string, amount types.Int, from, to types.AccAddress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCoinsTo", denom, amount, from, to)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCoinsTo indicates an expected call of SendCoinsTo.
func (mr *MockTransferManagerMockRecorder) SendCoinsTo(denom, amount, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoinsTo", reflect.TypeOf((*MockTransferManager)(nil).SendCoinsTo), denom, amount, from, to)
}

// SendCreditsTo mocks base method.
func (m *MockTransferManager) SendCreditsTo(batchId uint64, amount math.Dec, from, to types.AccAddress, retire bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCreditsTo", batchId, amount, from, to, retire)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCreditsTo indicates an expected call of SendCreditsTo.
func (mr *MockTransferManagerMockRecorder) SendCreditsTo(batchId, amount, from, to, retire interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCreditsTo", reflect.TypeOf((*MockTransferManager)(nil).SendCreditsTo), batchId, amount, from, to, retire)
}
