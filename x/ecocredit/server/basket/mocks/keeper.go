// Code generated by MockGen. DO NOT EDIT.
// Source: x/ecocredit/server/basket/keeper.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	core "github.com/regen-network/regen-ledger/x/ecocredit/core"
)

// MockEcocreditKeeper is a mock of EcocreditKeeper interface.
type MockEcocreditKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockEcocreditKeeperMockRecorder
}

// MockEcocreditKeeperMockRecorder is the mock recorder for MockEcocreditKeeper.
type MockEcocreditKeeperMockRecorder struct {
	mock *MockEcocreditKeeper
}

// NewMockEcocreditKeeper creates a new mock instance.
func NewMockEcocreditKeeper(ctrl *gomock.Controller) *MockEcocreditKeeper {
	mock := &MockEcocreditKeeper{ctrl: ctrl}
	mock.recorder = &MockEcocreditKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEcocreditKeeper) EXPECT() *MockEcocreditKeeperMockRecorder {
	return m.recorder
}

// Balance mocks base method.
func (m *MockEcocreditKeeper) Balance(arg0 context.Context, arg1 *core.QueryBalanceRequest) (*core.QueryBalanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Balance", arg0, arg1)
	ret0, _ := ret[0].(*core.QueryBalanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Balance indicates an expected call of Balance.
func (mr *MockEcocreditKeeperMockRecorder) Balance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Balance", reflect.TypeOf((*MockEcocreditKeeper)(nil).Balance), arg0, arg1)
}

// BatchInfo mocks base method.
func (m *MockEcocreditKeeper) BatchInfo(arg0 context.Context, arg1 *core.QueryBatchInfoRequest) (*core.QueryBatchInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchInfo", arg0, arg1)
	ret0, _ := ret[0].(*core.QueryBatchInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchInfo indicates an expected call of BatchInfo.
func (mr *MockEcocreditKeeperMockRecorder) BatchInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchInfo", reflect.TypeOf((*MockEcocreditKeeper)(nil).BatchInfo), arg0, arg1)
}

// Batches mocks base method.
func (m *MockEcocreditKeeper) Batches(arg0 context.Context, arg1 *core.QueryBatchesRequest) (*core.QueryBatchesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Batches", arg0, arg1)
	ret0, _ := ret[0].(*core.QueryBatchesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Batches indicates an expected call of Batches.
func (mr *MockEcocreditKeeperMockRecorder) Batches(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Batches", reflect.TypeOf((*MockEcocreditKeeper)(nil).Batches), arg0, arg1)
}

// BatchesByClass mocks base method.
func (m *MockEcocreditKeeper) BatchesByClass(arg0 context.Context, arg1 *core.QueryBatchesByClassRequest) (*core.QueryBatchesByClassResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchesByClass", arg0, arg1)
	ret0, _ := ret[0].(*core.QueryBatchesByClassResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchesByClass indicates an expected call of BatchesByClass.
func (mr *MockEcocreditKeeperMockRecorder) BatchesByClass(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchesByClass", reflect.TypeOf((*MockEcocreditKeeper)(nil).BatchesByClass), arg0, arg1)
}

// ClassInfo mocks base method.
func (m *MockEcocreditKeeper) ClassInfo(arg0 context.Context, arg1 *core.QueryClassInfoRequest) (*core.QueryClassInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClassInfo", arg0, arg1)
	ret0, _ := ret[0].(*core.QueryClassInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClassInfo indicates an expected call of ClassInfo.
func (mr *MockEcocreditKeeperMockRecorder) ClassInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClassInfo", reflect.TypeOf((*MockEcocreditKeeper)(nil).ClassInfo), arg0, arg1)
}

// ClassIssuers mocks base method.
func (m *MockEcocreditKeeper) ClassIssuers(arg0 context.Context, arg1 *core.QueryClassIssuersRequest) (*core.QueryClassIssuersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClassIssuers", arg0, arg1)
	ret0, _ := ret[0].(*core.QueryClassIssuersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClassIssuers indicates an expected call of ClassIssuers.
func (mr *MockEcocreditKeeperMockRecorder) ClassIssuers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClassIssuers", reflect.TypeOf((*MockEcocreditKeeper)(nil).ClassIssuers), arg0, arg1)
}

// Classes mocks base method.
func (m *MockEcocreditKeeper) Classes(arg0 context.Context, arg1 *core.QueryClassesRequest) (*core.QueryClassesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Classes", arg0, arg1)
	ret0, _ := ret[0].(*core.QueryClassesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Classes indicates an expected call of Classes.
func (mr *MockEcocreditKeeperMockRecorder) Classes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Classes", reflect.TypeOf((*MockEcocreditKeeper)(nil).Classes), arg0, arg1)
}

// CreditTypes mocks base method.
func (m *MockEcocreditKeeper) CreditTypes(arg0 context.Context, arg1 *core.QueryCreditTypesRequest) (*core.QueryCreditTypesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreditTypes", arg0, arg1)
	ret0, _ := ret[0].(*core.QueryCreditTypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreditTypes indicates an expected call of CreditTypes.
func (mr *MockEcocreditKeeperMockRecorder) CreditTypes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreditTypes", reflect.TypeOf((*MockEcocreditKeeper)(nil).CreditTypes), arg0, arg1)
}

// Params mocks base method.
func (m *MockEcocreditKeeper) Params(arg0 context.Context, arg1 *core.QueryParamsRequest) (*core.QueryParamsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Params", arg0, arg1)
	ret0, _ := ret[0].(*core.QueryParamsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Params indicates an expected call of Params.
func (mr *MockEcocreditKeeperMockRecorder) Params(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Params", reflect.TypeOf((*MockEcocreditKeeper)(nil).Params), arg0, arg1)
}

// ProjectInfo mocks base method.
func (m *MockEcocreditKeeper) ProjectInfo(arg0 context.Context, arg1 *core.QueryProjectInfoRequest) (*core.QueryProjectInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectInfo", arg0, arg1)
	ret0, _ := ret[0].(*core.QueryProjectInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectInfo indicates an expected call of ProjectInfo.
func (mr *MockEcocreditKeeperMockRecorder) ProjectInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectInfo", reflect.TypeOf((*MockEcocreditKeeper)(nil).ProjectInfo), arg0, arg1)
}

// Projects mocks base method.
func (m *MockEcocreditKeeper) Projects(arg0 context.Context, arg1 *core.QueryProjectsRequest) (*core.QueryProjectsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Projects", arg0, arg1)
	ret0, _ := ret[0].(*core.QueryProjectsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Projects indicates an expected call of Projects.
func (mr *MockEcocreditKeeperMockRecorder) Projects(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Projects", reflect.TypeOf((*MockEcocreditKeeper)(nil).Projects), arg0, arg1)
}

// Supply mocks base method.
func (m *MockEcocreditKeeper) Supply(arg0 context.Context, arg1 *core.QuerySupplyRequest) (*core.QuerySupplyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Supply", arg0, arg1)
	ret0, _ := ret[0].(*core.QuerySupplyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Supply indicates an expected call of Supply.
func (mr *MockEcocreditKeeperMockRecorder) Supply(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Supply", reflect.TypeOf((*MockEcocreditKeeper)(nil).Supply), arg0, arg1)
}
