// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: regen/bond/v1alpha1/tx.proto

package bond

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgIssueBond is the Msg/IssueBond request type.
type MsgIssueBond struct {
	EmissionDenom string `protobuf:"bytes,1,opt,name=emission_denom,json=emissionDenom,proto3" json:"emission_denom,omitempty"`
	// bond name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// account address of current holder of the bond
	Holder string `protobuf:"bytes,3,opt,name=holder,proto3" json:"holder,omitempty"`
	// face value of the bond
	FaceValue string `protobuf:"bytes,4,opt,name=face_value,json=faceValue,proto3" json:"face_value,omitempty"`
	// currency of the face value
	FaceCurrency string `protobuf:"bytes,5,opt,name=face_currency,json=faceCurrency,proto3" json:"face_currency,omitempty"`
	// date of issuance
	IssuanceDate *time.Time `protobuf:"bytes,6,opt,name=issuance_date,json=issuanceDate,proto3,stdtime" json:"issuance_date,omitempty"`
	// date of maturity
	MaturityDate *time.Time `protobuf:"bytes,7,opt,name=maturity_date,json=maturityDate,proto3,stdtime" json:"maturity_date,omitempty"`
	// coupon rate
	CouponRate string `protobuf:"bytes,8,opt,name=coupon_rate,json=couponRate,proto3" json:"coupon_rate,omitempty"`
	// coupon frequency
	CouponFrequency string `protobuf:"bytes,9,opt,name=coupon_frequency,json=couponFrequency,proto3" json:"coupon_frequency,omitempty"`
	// project code
	Project string `protobuf:"bytes,10,opt,name=project,proto3" json:"project,omitempty"`
	// metadata encoded in base64
	Metadata string `protobuf:"bytes,11,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *MsgIssueBond) Reset()         { *m = MsgIssueBond{} }
func (m *MsgIssueBond) String() string { return proto.CompactTextString(m) }
func (*MsgIssueBond) ProtoMessage()    {}
func (*MsgIssueBond) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac050ca2f31dec5, []int{0}
}
func (m *MsgIssueBond) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgIssueBond) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgIssueBond.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgIssueBond) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIssueBond.Merge(m, src)
}
func (m *MsgIssueBond) XXX_Size() int {
	return m.Size()
}
func (m *MsgIssueBond) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIssueBond.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIssueBond proto.InternalMessageInfo

func (m *MsgIssueBond) GetEmissionDenom() string {
	if m != nil {
		return m.EmissionDenom
	}
	return ""
}

func (m *MsgIssueBond) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgIssueBond) GetHolder() string {
	if m != nil {
		return m.Holder
	}
	return ""
}

func (m *MsgIssueBond) GetFaceValue() string {
	if m != nil {
		return m.FaceValue
	}
	return ""
}

func (m *MsgIssueBond) GetFaceCurrency() string {
	if m != nil {
		return m.FaceCurrency
	}
	return ""
}

func (m *MsgIssueBond) GetIssuanceDate() *time.Time {
	if m != nil {
		return m.IssuanceDate
	}
	return nil
}

func (m *MsgIssueBond) GetMaturityDate() *time.Time {
	if m != nil {
		return m.MaturityDate
	}
	return nil
}

func (m *MsgIssueBond) GetCouponRate() string {
	if m != nil {
		return m.CouponRate
	}
	return ""
}

func (m *MsgIssueBond) GetCouponFrequency() string {
	if m != nil {
		return m.CouponFrequency
	}
	return ""
}

func (m *MsgIssueBond) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *MsgIssueBond) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

// MsgIssueBondResponse is the Msg/IssueBond response type.
type MsgIssueBondResponse struct {
	// bond_id is the unique ID of the newly created bond.
	BondId string `protobuf:"bytes,1,opt,name=bond_id,json=bondId,proto3" json:"bond_id,omitempty"`
}

func (m *MsgIssueBondResponse) Reset()         { *m = MsgIssueBondResponse{} }
func (m *MsgIssueBondResponse) String() string { return proto.CompactTextString(m) }
func (*MsgIssueBondResponse) ProtoMessage()    {}
func (*MsgIssueBondResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac050ca2f31dec5, []int{1}
}
func (m *MsgIssueBondResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgIssueBondResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgIssueBondResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgIssueBondResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIssueBondResponse.Merge(m, src)
}
func (m *MsgIssueBondResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgIssueBondResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIssueBondResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIssueBondResponse proto.InternalMessageInfo

func (m *MsgIssueBondResponse) GetBondId() string {
	if m != nil {
		return m.BondId
	}
	return ""
}

// MsgIssueBond is the Msg/IssueBond request type.
type MsgSellBond struct {
	// bond_id is the unique ID of the newly created bond.
	BondId string `protobuf:"bytes,1,opt,name=bond_id,json=bondId,proto3" json:"bond_id,omitempty"`
	// buyer of the bond
	Buyer string `protobuf:"bytes,2,opt,name=buyer,proto3" json:"buyer,omitempty"`
	// amount of bought bond
	Amount string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// holder of the bond
	Holder string `protobuf:"bytes,4,opt,name=holder,proto3" json:"holder,omitempty"`
}

func (m *MsgSellBond) Reset()         { *m = MsgSellBond{} }
func (m *MsgSellBond) String() string { return proto.CompactTextString(m) }
func (*MsgSellBond) ProtoMessage()    {}
func (*MsgSellBond) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac050ca2f31dec5, []int{2}
}
func (m *MsgSellBond) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSellBond) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSellBond.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSellBond) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSellBond.Merge(m, src)
}
func (m *MsgSellBond) XXX_Size() int {
	return m.Size()
}
func (m *MsgSellBond) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSellBond.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSellBond proto.InternalMessageInfo

func (m *MsgSellBond) GetBondId() string {
	if m != nil {
		return m.BondId
	}
	return ""
}

func (m *MsgSellBond) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

func (m *MsgSellBond) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *MsgSellBond) GetHolder() string {
	if m != nil {
		return m.Holder
	}
	return ""
}

// MsgSellBondResponse is the Msg/MsgSellBond response type.
type MsgSellBondResponse struct {
	// bond_id is the unique ID of the newly created bond.
	BondId []string `protobuf:"bytes,1,rep,name=bond_id,json=bondId,proto3" json:"bond_id,omitempty"`
}

func (m *MsgSellBondResponse) Reset()         { *m = MsgSellBondResponse{} }
func (m *MsgSellBondResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSellBondResponse) ProtoMessage()    {}
func (*MsgSellBondResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac050ca2f31dec5, []int{3}
}
func (m *MsgSellBondResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSellBondResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSellBondResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSellBondResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSellBondResponse.Merge(m, src)
}
func (m *MsgSellBondResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSellBondResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSellBondResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSellBondResponse proto.InternalMessageInfo

func (m *MsgSellBondResponse) GetBondId() []string {
	if m != nil {
		return m.BondId
	}
	return nil
}

// MsgIssueBond is the Msg/MsgMatureBond request type.
type MsgMatureEmission struct {
	// bond_id is the unique ID of all bonds that belongs to one emission.
	EmissionDenom string `protobuf:"bytes,1,opt,name=emission_denom,json=emissionDenom,proto3" json:"emission_denom,omitempty"`
}

func (m *MsgMatureEmission) Reset()         { *m = MsgMatureEmission{} }
func (m *MsgMatureEmission) String() string { return proto.CompactTextString(m) }
func (*MsgMatureEmission) ProtoMessage()    {}
func (*MsgMatureEmission) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac050ca2f31dec5, []int{4}
}
func (m *MsgMatureEmission) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMatureEmission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMatureEmission.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMatureEmission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMatureEmission.Merge(m, src)
}
func (m *MsgMatureEmission) XXX_Size() int {
	return m.Size()
}
func (m *MsgMatureEmission) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMatureEmission.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMatureEmission proto.InternalMessageInfo

func (m *MsgMatureEmission) GetEmissionDenom() string {
	if m != nil {
		return m.EmissionDenom
	}
	return ""
}

// MsgMatureBondResponse is the Msg/MsgMatureBond response type.
type MsgMatureEmissionResponse struct {
	// bond_id is the unique ID of all bonds that belongs to one emission.
	EmissionDenom string `protobuf:"bytes,1,opt,name=emission_denom,json=emissionDenom,proto3" json:"emission_denom,omitempty"`
}

func (m *MsgMatureEmissionResponse) Reset()         { *m = MsgMatureEmissionResponse{} }
func (m *MsgMatureEmissionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMatureEmissionResponse) ProtoMessage()    {}
func (*MsgMatureEmissionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac050ca2f31dec5, []int{5}
}
func (m *MsgMatureEmissionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMatureEmissionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMatureEmissionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMatureEmissionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMatureEmissionResponse.Merge(m, src)
}
func (m *MsgMatureEmissionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMatureEmissionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMatureEmissionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMatureEmissionResponse proto.InternalMessageInfo

func (m *MsgMatureEmissionResponse) GetEmissionDenom() string {
	if m != nil {
		return m.EmissionDenom
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgIssueBond)(nil), "regen.bond.v1alpha1.MsgIssueBond")
	proto.RegisterType((*MsgIssueBondResponse)(nil), "regen.bond.v1alpha1.MsgIssueBondResponse")
	proto.RegisterType((*MsgSellBond)(nil), "regen.bond.v1alpha1.MsgSellBond")
	proto.RegisterType((*MsgSellBondResponse)(nil), "regen.bond.v1alpha1.MsgSellBondResponse")
	proto.RegisterType((*MsgMatureEmission)(nil), "regen.bond.v1alpha1.MsgMatureEmission")
	proto.RegisterType((*MsgMatureEmissionResponse)(nil), "regen.bond.v1alpha1.MsgMatureEmissionResponse")
}

func init() { proto.RegisterFile("regen/bond/v1alpha1/tx.proto", fileDescriptor_8ac050ca2f31dec5) }

var fileDescriptor_8ac050ca2f31dec5 = []byte{
	// 578 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xad, 0xbf, 0xa4, 0x69, 0x73, 0xd3, 0x7e, 0xc0, 0xb4, 0x02, 0x13, 0x81, 0x5b, 0x82, 0x90,
	0x5a, 0x09, 0x3c, 0x4a, 0xd9, 0xb1, 0x0c, 0x6d, 0xa5, 0x2e, 0xb2, 0x09, 0x08, 0x04, 0x9b, 0x68,
	0x6c, 0xdf, 0xba, 0x06, 0x7b, 0xc6, 0xcc, 0x8c, 0x4b, 0xfb, 0x16, 0x7d, 0x19, 0x16, 0xbc, 0x01,
	0xcb, 0x2e, 0xd9, 0x81, 0x9a, 0x17, 0x41, 0x33, 0xb6, 0x83, 0x25, 0x5a, 0x11, 0x76, 0x3e, 0x3f,
	0x73, 0x3c, 0xb9, 0xe7, 0x3a, 0xf0, 0x40, 0x62, 0x8c, 0x9c, 0x06, 0x82, 0x47, 0xf4, 0x74, 0xc8,
	0xd2, 0xfc, 0x84, 0x0d, 0xa9, 0x3e, 0xf3, 0x73, 0x29, 0xb4, 0x20, 0x1b, 0x56, 0xf5, 0x8d, 0xea,
	0xd7, 0x6a, 0x7f, 0x33, 0x16, 0xb1, 0xb0, 0x3a, 0x35, 0x4f, 0xa5, 0xb5, 0xbf, 0x15, 0x0b, 0x11,
	0xa7, 0x48, 0x2d, 0x0a, 0x8a, 0x63, 0xaa, 0x93, 0x0c, 0x95, 0x66, 0x59, 0x5e, 0x19, 0xbc, 0x50,
	0xa8, 0x4c, 0x28, 0x1a, 0x30, 0x85, 0xf4, 0x74, 0x18, 0xa0, 0x66, 0x43, 0x1a, 0x8a, 0x84, 0x97,
	0xfa, 0xe0, 0x4b, 0x0b, 0xd6, 0xc6, 0x2a, 0x3e, 0x52, 0xaa, 0xc0, 0x91, 0xe0, 0x11, 0x79, 0x02,
	0xff, 0x63, 0x96, 0x28, 0x95, 0x08, 0x3e, 0x8d, 0x90, 0x8b, 0xcc, 0x75, 0xb6, 0x9d, 0x9d, 0xee,
	0x64, 0xbd, 0x66, 0xf7, 0x0d, 0x49, 0x08, 0xb4, 0x39, 0xcb, 0xd0, 0xfd, 0xcf, 0x8a, 0xf6, 0x99,
	0xdc, 0x85, 0xce, 0x89, 0x48, 0x23, 0x94, 0x6e, 0xcb, 0xb2, 0x15, 0x22, 0x0f, 0x01, 0x8e, 0x59,
	0x88, 0xd3, 0x53, 0x96, 0x16, 0xe8, 0xb6, 0xad, 0xd6, 0x35, 0xcc, 0x1b, 0x43, 0x90, 0xc7, 0xb0,
	0x6e, 0xe5, 0xb0, 0x90, 0x12, 0x79, 0x78, 0xee, 0x2e, 0x5b, 0xc7, 0x9a, 0x21, 0x5f, 0x56, 0x1c,
	0x39, 0x80, 0xf5, 0x44, 0xa9, 0x82, 0xf1, 0x10, 0xa7, 0x11, 0xd3, 0xe8, 0x76, 0xb6, 0x9d, 0x9d,
	0xde, 0x5e, 0xdf, 0x2f, 0x07, 0xe0, 0xd7, 0x03, 0xf0, 0x5f, 0xd7, 0x03, 0x18, 0xb5, 0x2f, 0x7e,
	0x6c, 0x39, 0x93, 0xb5, 0xfa, 0xd8, 0x3e, 0xd3, 0x68, 0x62, 0x32, 0xa6, 0x0b, 0x99, 0xe8, 0xf3,
	0x32, 0x66, 0x65, 0xd1, 0x98, 0xfa, 0x98, 0x8d, 0xd9, 0x82, 0x5e, 0x28, 0x8a, 0x5c, 0xf0, 0xa9,
	0x34, 0x21, 0xab, 0xf6, 0xc2, 0x50, 0x52, 0x13, 0x63, 0xd8, 0x85, 0xdb, 0x95, 0xe1, 0x58, 0xe2,
	0xa7, 0xc2, 0xfe, 0xac, 0xae, 0x75, 0xdd, 0x2a, 0xf9, 0xc3, 0x9a, 0x26, 0x2e, 0xac, 0xe4, 0x52,
	0x7c, 0xc0, 0x50, 0xbb, 0x60, 0x1d, 0x35, 0x24, 0x7d, 0x58, 0xcd, 0x50, 0xb3, 0x88, 0x69, 0xe6,
	0xf6, 0xac, 0x34, 0xc7, 0x03, 0x0a, 0x9b, 0xcd, 0xda, 0x26, 0xa8, 0x72, 0xc1, 0x15, 0x92, 0x7b,
	0xb0, 0x62, 0xf6, 0x66, 0x9a, 0x44, 0x55, 0x6f, 0x1d, 0x03, 0x8f, 0xa2, 0x41, 0x0a, 0xbd, 0xb1,
	0x8a, 0x5f, 0x61, 0x9a, 0xda, 0x9a, 0x6f, 0xf2, 0x91, 0x4d, 0x58, 0x0e, 0x8a, 0x73, 0x94, 0x55,
	0xb3, 0x25, 0x30, 0xd5, 0xb2, 0x4c, 0x14, 0x5c, 0xd7, 0xd5, 0x96, 0xa8, 0x51, 0x79, 0xbb, 0x59,
	0xf9, 0xc0, 0x87, 0x8d, 0xc6, 0xdb, 0xae, 0xbf, 0x5d, 0xab, 0x71, 0xbb, 0x17, 0x70, 0x67, 0xac,
	0xe2, 0xb1, 0x99, 0x31, 0x1e, 0x54, 0x8b, 0xb6, 0xe0, 0x2a, 0x0e, 0x46, 0x70, 0xff, 0x8f, 0xb3,
	0xf3, 0x37, 0x2e, 0x96, 0xb1, 0xf7, 0xd5, 0x81, 0xd6, 0x58, 0xc5, 0xe4, 0x1d, 0x74, 0x7f, 0x7f,
	0x0a, 0x8f, 0xfc, 0x6b, 0x3e, 0x44, 0xbf, 0x39, 0xf6, 0xfe, 0xee, 0x5f, 0x2d, 0xf3, 0x9b, 0xbc,
	0x85, 0xd5, 0xf9, 0xf4, 0xb7, 0x6f, 0x3a, 0x56, 0x3b, 0xfe, 0x21, 0x78, 0x74, 0xf8, 0xed, 0xca,
	0x73, 0x2e, 0xaf, 0x3c, 0xe7, 0xe7, 0x95, 0xe7, 0x5c, 0xcc, 0xbc, 0xa5, 0xcb, 0x99, 0xb7, 0xf4,
	0x7d, 0xe6, 0x2d, 0xbd, 0x7f, 0x1a, 0x27, 0xfa, 0xa4, 0x08, 0xfc, 0x50, 0x64, 0xd4, 0xc6, 0x3d,
	0xe3, 0xa8, 0x3f, 0x0b, 0xf9, 0xb1, 0x42, 0x29, 0x46, 0x31, 0x4a, 0x7a, 0x66, 0xff, 0x88, 0x82,
	0x8e, 0x5d, 0xfe, 0xe7, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0xfb, 0x4e, 0xb3, 0xe3, 0x9d, 0x04,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// IssueBond issues a new bond
	IssueBond(ctx context.Context, in *MsgIssueBond, opts ...grpc.CallOption) (*MsgIssueBondResponse, error)
	// SellBond sells a bond to a new owner
	SellBond(ctx context.Context, in *MsgSellBond, opts ...grpc.CallOption) (*MsgIssueBondResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) IssueBond(ctx context.Context, in *MsgIssueBond, opts ...grpc.CallOption) (*MsgIssueBondResponse, error) {
	out := new(MsgIssueBondResponse)
	err := c.cc.Invoke(ctx, "/regen.bond.v1alpha1.Msg/IssueBond", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SellBond(ctx context.Context, in *MsgSellBond, opts ...grpc.CallOption) (*MsgIssueBondResponse, error) {
	out := new(MsgIssueBondResponse)
	err := c.cc.Invoke(ctx, "/regen.bond.v1alpha1.Msg/SellBond", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// IssueBond issues a new bond
	IssueBond(context.Context, *MsgIssueBond) (*MsgIssueBondResponse, error)
	// SellBond sells a bond to a new owner
	SellBond(context.Context, *MsgSellBond) (*MsgIssueBondResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) IssueBond(ctx context.Context, req *MsgIssueBond) (*MsgIssueBondResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueBond not implemented")
}
func (*UnimplementedMsgServer) SellBond(ctx context.Context, req *MsgSellBond) (*MsgIssueBondResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellBond not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_IssueBond_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgIssueBond)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).IssueBond(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regen.bond.v1alpha1.Msg/IssueBond",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).IssueBond(ctx, req.(*MsgIssueBond))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SellBond_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSellBond)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SellBond(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regen.bond.v1alpha1.Msg/SellBond",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SellBond(ctx, req.(*MsgSellBond))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "regen.bond.v1alpha1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IssueBond",
			Handler:    _Msg_IssueBond_Handler,
		},
		{
			MethodName: "SellBond",
			Handler:    _Msg_SellBond_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "regen/bond/v1alpha1/tx.proto",
}

func (m *MsgIssueBond) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIssueBond) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgIssueBond) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		i -= len(m.Metadata)
		copy(dAtA[i:], m.Metadata)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Metadata)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Project) > 0 {
		i -= len(m.Project)
		copy(dAtA[i:], m.Project)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Project)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.CouponFrequency) > 0 {
		i -= len(m.CouponFrequency)
		copy(dAtA[i:], m.CouponFrequency)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CouponFrequency)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.CouponRate) > 0 {
		i -= len(m.CouponRate)
		copy(dAtA[i:], m.CouponRate)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CouponRate)))
		i--
		dAtA[i] = 0x42
	}
	if m.MaturityDate != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.MaturityDate, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.MaturityDate):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintTx(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x3a
	}
	if m.IssuanceDate != nil {
		n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.IssuanceDate, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.IssuanceDate):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintTx(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x32
	}
	if len(m.FaceCurrency) > 0 {
		i -= len(m.FaceCurrency)
		copy(dAtA[i:], m.FaceCurrency)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FaceCurrency)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FaceValue) > 0 {
		i -= len(m.FaceValue)
		copy(dAtA[i:], m.FaceValue)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FaceValue)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Holder) > 0 {
		i -= len(m.Holder)
		copy(dAtA[i:], m.Holder)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Holder)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.EmissionDenom) > 0 {
		i -= len(m.EmissionDenom)
		copy(dAtA[i:], m.EmissionDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EmissionDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgIssueBondResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIssueBondResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgIssueBondResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BondId) > 0 {
		i -= len(m.BondId)
		copy(dAtA[i:], m.BondId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BondId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSellBond) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSellBond) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSellBond) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Holder) > 0 {
		i -= len(m.Holder)
		copy(dAtA[i:], m.Holder)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Holder)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BondId) > 0 {
		i -= len(m.BondId)
		copy(dAtA[i:], m.BondId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BondId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSellBondResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSellBondResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSellBondResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BondId) > 0 {
		for iNdEx := len(m.BondId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BondId[iNdEx])
			copy(dAtA[i:], m.BondId[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.BondId[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgMatureEmission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMatureEmission) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMatureEmission) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EmissionDenom) > 0 {
		i -= len(m.EmissionDenom)
		copy(dAtA[i:], m.EmissionDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EmissionDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMatureEmissionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMatureEmissionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMatureEmissionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EmissionDenom) > 0 {
		i -= len(m.EmissionDenom)
		copy(dAtA[i:], m.EmissionDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EmissionDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgIssueBond) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EmissionDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Holder)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FaceValue)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FaceCurrency)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.IssuanceDate != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.IssuanceDate)
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MaturityDate != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.MaturityDate)
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CouponRate)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CouponFrequency)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Project)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Metadata)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgIssueBondResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BondId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSellBond) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BondId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Holder)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSellBondResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BondId) > 0 {
		for _, s := range m.BondId {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgMatureEmission) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EmissionDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgMatureEmissionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EmissionDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgIssueBond) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIssueBond: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIssueBond: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmissionDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmissionDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Holder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Holder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FaceValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceCurrency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FaceCurrency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuanceDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IssuanceDate == nil {
				m.IssuanceDate = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.IssuanceDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaturityDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaturityDate == nil {
				m.MaturityDate = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.MaturityDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CouponRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CouponRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CouponFrequency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CouponFrequency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Project", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Project = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgIssueBondResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIssueBondResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIssueBondResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSellBond) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSellBond: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSellBond: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Holder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Holder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSellBondResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSellBondResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSellBondResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondId = append(m.BondId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMatureEmission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMatureEmission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMatureEmission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmissionDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmissionDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMatureEmissionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMatureEmissionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMatureEmissionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmissionDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmissionDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
