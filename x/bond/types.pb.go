// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: regen/bond/v1alpha1/types.proto

package bond

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BondInfo_Status int32

const (
	BondInfo_ACTIVE  BondInfo_Status = 0
	BondInfo_CLOSED  BondInfo_Status = 1
	BondInfo_MATURED BondInfo_Status = 2
)

var BondInfo_Status_name = map[int32]string{
	0: "ACTIVE",
	1: "CLOSED",
	2: "MATURED",
}

var BondInfo_Status_value = map[string]int32{
	"ACTIVE":  0,
	"CLOSED":  1,
	"MATURED": 2,
}

func (x BondInfo_Status) String() string {
	return proto.EnumName(BondInfo_Status_name, int32(x))
}

func (BondInfo_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5fca217741ae8767, []int{0, 0}
}

// BatchInfo represents the high-level on-chain information for a bond.
type BondInfo struct {
	// id is the unique ID of bond.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// emission_denom is the unique id of emission
	EmissionDenom   string          `protobuf:"bytes,2,opt,name=emission_denom,json=emissionDenom,proto3" json:"emission_denom,omitempty"`
	Name            string          `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Holder          string          `protobuf:"bytes,4,opt,name=holder,proto3" json:"holder,omitempty"`
	ParentBond      string          `protobuf:"bytes,5,opt,name=parent_bond,json=parentBond,proto3" json:"parent_bond,omitempty"`
	FaceValue       string          `protobuf:"bytes,6,opt,name=face_value,json=faceValue,proto3" json:"face_value,omitempty"`
	FaceCurrency    string          `protobuf:"bytes,7,opt,name=face_currency,json=faceCurrency,proto3" json:"face_currency,omitempty"`
	CreationDate    string          `protobuf:"bytes,8,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
	IssuanceDate    string          `protobuf:"bytes,9,opt,name=issuance_date,json=issuanceDate,proto3" json:"issuance_date,omitempty"`
	MaturityDate    string          `protobuf:"bytes,10,opt,name=maturity_date,json=maturityDate,proto3" json:"maturity_date,omitempty"`
	CouponRate      string          `protobuf:"bytes,11,opt,name=coupon_rate,json=couponRate,proto3" json:"coupon_rate,omitempty"`
	CouponFrequency string          `protobuf:"bytes,12,opt,name=coupon_frequency,json=couponFrequency,proto3" json:"coupon_frequency,omitempty"`
	Status          BondInfo_Status `protobuf:"varint,13,opt,name=status,proto3,enum=regen.bond.v1alpha1.BondInfo_Status" json:"status,omitempty"`
	Project         string          `protobuf:"bytes,14,opt,name=project,proto3" json:"project,omitempty"`
	Metadata        string          `protobuf:"bytes,15,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *BondInfo) Reset()         { *m = BondInfo{} }
func (m *BondInfo) String() string { return proto.CompactTextString(m) }
func (*BondInfo) ProtoMessage()    {}
func (*BondInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fca217741ae8767, []int{0}
}
func (m *BondInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BondInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BondInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BondInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BondInfo.Merge(m, src)
}
func (m *BondInfo) XXX_Size() int {
	return m.Size()
}
func (m *BondInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BondInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BondInfo proto.InternalMessageInfo

func (m *BondInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BondInfo) GetEmissionDenom() string {
	if m != nil {
		return m.EmissionDenom
	}
	return ""
}

func (m *BondInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BondInfo) GetHolder() string {
	if m != nil {
		return m.Holder
	}
	return ""
}

func (m *BondInfo) GetParentBond() string {
	if m != nil {
		return m.ParentBond
	}
	return ""
}

func (m *BondInfo) GetFaceValue() string {
	if m != nil {
		return m.FaceValue
	}
	return ""
}

func (m *BondInfo) GetFaceCurrency() string {
	if m != nil {
		return m.FaceCurrency
	}
	return ""
}

func (m *BondInfo) GetCreationDate() string {
	if m != nil {
		return m.CreationDate
	}
	return ""
}

func (m *BondInfo) GetIssuanceDate() string {
	if m != nil {
		return m.IssuanceDate
	}
	return ""
}

func (m *BondInfo) GetMaturityDate() string {
	if m != nil {
		return m.MaturityDate
	}
	return ""
}

func (m *BondInfo) GetCouponRate() string {
	if m != nil {
		return m.CouponRate
	}
	return ""
}

func (m *BondInfo) GetCouponFrequency() string {
	if m != nil {
		return m.CouponFrequency
	}
	return ""
}

func (m *BondInfo) GetStatus() BondInfo_Status {
	if m != nil {
		return m.Status
	}
	return BondInfo_ACTIVE
}

func (m *BondInfo) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *BondInfo) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

func init() {
	proto.RegisterEnum("regen.bond.v1alpha1.BondInfo_Status", BondInfo_Status_name, BondInfo_Status_value)
	proto.RegisterType((*BondInfo)(nil), "regen.bond.v1alpha1.BondInfo")
}

func init() { proto.RegisterFile("regen/bond/v1alpha1/types.proto", fileDescriptor_5fca217741ae8767) }

var fileDescriptor_5fca217741ae8767 = []byte{
	// 485 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xe3, 0x50, 0xdc, 0x64, 0xd2, 0xa4, 0xd1, 0x82, 0xd0, 0x2a, 0x12, 0x4e, 0x55, 0x40,
	0x2a, 0x12, 0xb5, 0x55, 0xb8, 0x72, 0x69, 0x93, 0x54, 0xaa, 0x04, 0x42, 0x4a, 0x4b, 0x0f, 0x5c,
	0xa2, 0x8d, 0x3d, 0x71, 0x0c, 0xf1, 0xae, 0x59, 0xaf, 0x0b, 0x79, 0x0b, 0x1e, 0x85, 0xc7, 0xe0,
	0xd8, 0x23, 0x47, 0x94, 0xbc, 0x08, 0xda, 0xd9, 0x98, 0x13, 0xb7, 0x9d, 0xef, 0xff, 0x3c, 0xfa,
	0xad, 0x5d, 0x18, 0x6a, 0x4c, 0x51, 0x46, 0x73, 0x25, 0x93, 0xe8, 0xee, 0x4c, 0xac, 0x8a, 0xa5,
	0x38, 0x8b, 0xcc, 0xba, 0xc0, 0x32, 0x2c, 0xb4, 0x32, 0x8a, 0x3d, 0x22, 0x21, 0xb4, 0x42, 0x58,
	0x0b, 0x83, 0xc7, 0xa9, 0x4a, 0x15, 0xe5, 0x91, 0x3d, 0x39, 0x75, 0x30, 0x4c, 0x95, 0x4a, 0x57,
	0x18, 0xd1, 0x34, 0xaf, 0x16, 0x91, 0xc9, 0x72, 0x2c, 0x8d, 0xc8, 0x0b, 0x27, 0x1c, 0xff, 0xdc,
	0x83, 0xd6, 0x85, 0x92, 0xc9, 0x95, 0x5c, 0x28, 0xd6, 0x83, 0x66, 0x96, 0x70, 0xef, 0xc8, 0x3b,
	0x69, 0x4f, 0x9b, 0x59, 0xc2, 0x5e, 0x40, 0x0f, 0xf3, 0xac, 0x2c, 0x33, 0x25, 0x67, 0x09, 0x4a,
	0x95, 0xf3, 0x26, 0x65, 0xdd, 0x9a, 0x8e, 0x2d, 0x64, 0x0c, 0xf6, 0xa4, 0xc8, 0x91, 0x3f, 0xa0,
	0x90, 0xce, 0xec, 0x09, 0xf8, 0x4b, 0xb5, 0x4a, 0x50, 0xf3, 0x3d, 0xa2, 0xbb, 0x89, 0x0d, 0xa1,
	0x53, 0x08, 0x8d, 0xd2, 0xcc, 0x6c, 0x7d, 0xfe, 0x90, 0x42, 0x70, 0xc8, 0xf6, 0x60, 0x4f, 0x01,
	0x16, 0x22, 0xc6, 0xd9, 0x9d, 0x58, 0x55, 0xc8, 0x7d, 0xca, 0xdb, 0x96, 0xdc, 0x5a, 0xc0, 0x9e,
	0x41, 0x97, 0xe2, 0xb8, 0xd2, 0x1a, 0x65, 0xbc, 0xe6, 0xfb, 0x64, 0x1c, 0x58, 0x38, 0xda, 0x31,
	0x2b, 0xc5, 0x1a, 0x85, 0xa1, 0xde, 0xc2, 0x20, 0x6f, 0x39, 0xa9, 0x86, 0x63, 0x61, 0x68, 0x53,
	0x56, 0x96, 0x95, 0x90, 0x31, 0x3a, 0xa9, 0xed, 0xa4, 0x1a, 0xd6, 0x52, 0x2e, 0x4c, 0xa5, 0x33,
	0xb3, 0x76, 0x12, 0x38, 0xa9, 0x86, 0x24, 0x0d, 0xa1, 0x13, 0xab, 0xaa, 0x50, 0x72, 0xa6, 0xad,
	0xd2, 0x71, 0xff, 0xe4, 0xd0, 0xd4, 0x0a, 0x2f, 0xa1, 0xbf, 0x13, 0x16, 0x1a, 0xbf, 0x56, 0xd4,
	0xfb, 0x80, 0xac, 0x43, 0xc7, 0x2f, 0x6b, 0xcc, 0xde, 0x82, 0x5f, 0x1a, 0x61, 0xaa, 0x92, 0x77,
	0x8f, 0xbc, 0x93, 0xde, 0xeb, 0xe7, 0xe1, 0x7f, 0x2e, 0x3b, 0xac, 0x6f, 0x2c, 0xbc, 0x26, 0x77,
	0xba, 0xfb, 0x86, 0x71, 0xd8, 0x2f, 0xb4, 0xfa, 0x8c, 0xb1, 0xe1, 0x3d, 0xda, 0x5f, 0x8f, 0x6c,
	0x00, 0xad, 0x1c, 0x8d, 0x48, 0x84, 0x11, 0xfc, 0x90, 0xa2, 0x7f, 0xf3, 0xf1, 0x29, 0xf8, 0x6e,
	0x0f, 0x03, 0xf0, 0xcf, 0x47, 0x37, 0x57, 0xb7, 0x93, 0x7e, 0xc3, 0x9e, 0x47, 0xef, 0x3e, 0x5c,
	0x4f, 0xc6, 0x7d, 0x8f, 0x75, 0x60, 0xff, 0xfd, 0xf9, 0xcd, 0xc7, 0xe9, 0x64, 0xdc, 0x6f, 0x5e,
	0x5c, 0xfe, 0xda, 0x04, 0xde, 0xfd, 0x26, 0xf0, 0xfe, 0x6c, 0x02, 0xef, 0xc7, 0x36, 0x68, 0xdc,
	0x6f, 0x83, 0xc6, 0xef, 0x6d, 0xd0, 0xf8, 0xf4, 0x2a, 0xcd, 0xcc, 0xb2, 0x9a, 0x87, 0xb1, 0xca,
	0x23, 0xaa, 0x7d, 0x2a, 0xd1, 0x7c, 0x53, 0xfa, 0xcb, 0x6e, 0x5a, 0x61, 0x92, 0xa2, 0x8e, 0xbe,
	0xd3, 0xdb, 0x9e, 0xfb, 0xf4, 0x02, 0xdf, 0xfc, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0xbf, 0x03,
	0x9f, 0xf0, 0x02, 0x00, 0x00,
}

func (m *BondInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BondInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BondInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		i -= len(m.Metadata)
		copy(dAtA[i:], m.Metadata)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Metadata)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Project) > 0 {
		i -= len(m.Project)
		copy(dAtA[i:], m.Project)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Project)))
		i--
		dAtA[i] = 0x72
	}
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x68
	}
	if len(m.CouponFrequency) > 0 {
		i -= len(m.CouponFrequency)
		copy(dAtA[i:], m.CouponFrequency)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CouponFrequency)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.CouponRate) > 0 {
		i -= len(m.CouponRate)
		copy(dAtA[i:], m.CouponRate)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CouponRate)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.MaturityDate) > 0 {
		i -= len(m.MaturityDate)
		copy(dAtA[i:], m.MaturityDate)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.MaturityDate)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.IssuanceDate) > 0 {
		i -= len(m.IssuanceDate)
		copy(dAtA[i:], m.IssuanceDate)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.IssuanceDate)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.CreationDate) > 0 {
		i -= len(m.CreationDate)
		copy(dAtA[i:], m.CreationDate)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CreationDate)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.FaceCurrency) > 0 {
		i -= len(m.FaceCurrency)
		copy(dAtA[i:], m.FaceCurrency)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.FaceCurrency)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.FaceValue) > 0 {
		i -= len(m.FaceValue)
		copy(dAtA[i:], m.FaceValue)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.FaceValue)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ParentBond) > 0 {
		i -= len(m.ParentBond)
		copy(dAtA[i:], m.ParentBond)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ParentBond)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Holder) > 0 {
		i -= len(m.Holder)
		copy(dAtA[i:], m.Holder)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Holder)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EmissionDenom) > 0 {
		i -= len(m.EmissionDenom)
		copy(dAtA[i:], m.EmissionDenom)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.EmissionDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BondInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.EmissionDenom)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Holder)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ParentBond)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.FaceValue)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.FaceCurrency)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.CreationDate)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.IssuanceDate)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.MaturityDate)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.CouponRate)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.CouponFrequency)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	l = len(m.Project)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Metadata)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BondInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BondInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BondInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmissionDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmissionDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Holder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Holder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentBond", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentBond = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FaceValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceCurrency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FaceCurrency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreationDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuanceDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssuanceDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaturityDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaturityDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CouponRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CouponRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CouponFrequency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CouponFrequency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= BondInfo_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Project", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Project = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
